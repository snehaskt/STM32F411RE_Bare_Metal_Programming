
10_system_tick_timer.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000002ac  08000198  08000198  00001198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  08000444  08000444  00001444  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08000454  08000454  0000145c  2**0
                  CONTENTS
  4 .ARM          00000000  08000454  08000454  0000145c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000454  0800045c  0000145c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000454  08000454  00001454  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08000458  08000458  00001458  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000000  20000000  20000000  0000145c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000000  0800045c  00002000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000001c  0800045c  0000201c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000145c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00000814  00000000  00000000  0000148c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000002e9  00000000  00000000  00001ca0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000098  00000000  00000000  00001f90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000005f  00000000  00000000  00002028  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00000f7a  00000000  00000000  00002087  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000012d7  00000000  00000000  00003001  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00053975  00000000  00000000  000042d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00057c4d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000010c  00000000  00000000  00057c90  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006a  00000000  00000000  00057d9c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	@ (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	@ (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000000 	.word	0x20000000
 80001b4:	00000000 	.word	0x00000000
 80001b8:	0800042c 	.word	0x0800042c

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	@ (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	@ (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	@ (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000004 	.word	0x20000004
 80001d4:	0800042c 	.word	0x0800042c

080001d8 <main>:
#define GPIOAEN				(1U<<0)
#define PIN					(1U<<5)
#define LED_PIN				PIN

int main(void)
{
 80001d8:	b580      	push	{r7, lr}
 80001da:	af00      	add	r7, sp, #0

	/*Enable the clock access to the GPIOA*/
	RCC-> AHB1ENR |= GPIOAEN;
 80001dc:	4b11      	ldr	r3, [pc, #68]	@ (8000224 <main+0x4c>)
 80001de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80001e0:	4a10      	ldr	r2, [pc, #64]	@ (8000224 <main+0x4c>)
 80001e2:	f043 0301 	orr.w	r3, r3, #1
 80001e6:	6313      	str	r3, [r2, #48]	@ 0x30


	/*set PA5 as the out pin*/
	GPIOA-> MODER |= (1U<<10);
 80001e8:	4b0f      	ldr	r3, [pc, #60]	@ (8000228 <main+0x50>)
 80001ea:	681b      	ldr	r3, [r3, #0]
 80001ec:	4a0e      	ldr	r2, [pc, #56]	@ (8000228 <main+0x50>)
 80001ee:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80001f2:	6013      	str	r3, [r2, #0]
	GPIOA-> MODER &= ~(1U<<11);
 80001f4:	4b0c      	ldr	r3, [pc, #48]	@ (8000228 <main+0x50>)
 80001f6:	681b      	ldr	r3, [r3, #0]
 80001f8:	4a0b      	ldr	r2, [pc, #44]	@ (8000228 <main+0x50>)
 80001fa:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80001fe:	6013      	str	r3, [r2, #0]


	uart2_rxtx_init();
 8000200:	f000 f840 	bl	8000284 <uart2_rxtx_init>

	while(1)
	{
		/*Toggle the LED*/
		uart2_write_string("second passed\n\r");
 8000204:	4809      	ldr	r0, [pc, #36]	@ (800022c <main+0x54>)
 8000206:	f000 f8ad 	bl	8000364 <uart2_write_string>
		GPIOA-> ODR ^= LED_PIN;
 800020a:	4b07      	ldr	r3, [pc, #28]	@ (8000228 <main+0x50>)
 800020c:	695b      	ldr	r3, [r3, #20]
 800020e:	4a06      	ldr	r2, [pc, #24]	@ (8000228 <main+0x50>)
 8000210:	f083 0320 	eor.w	r3, r3, #32
 8000214:	6153      	str	r3, [r2, #20]
		systickDelayMs(1000);
 8000216:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800021a:	f000 f809 	bl	8000230 <systickDelayMs>
		uart2_write_string("second passed\n\r");
 800021e:	bf00      	nop
 8000220:	e7f0      	b.n	8000204 <main+0x2c>
 8000222:	bf00      	nop
 8000224:	40023800 	.word	0x40023800
 8000228:	40020000 	.word	0x40020000
 800022c:	08000444 	.word	0x08000444

08000230 <systickDelayMs>:
#define CTRL_ENABLE					(1U<<0)
#define CTRL_CLKSRC					(1U<<2)
#define CTRL_COUNTFLAG				(1U<<16)

void systickDelayMs(int delay)
{
 8000230:	b480      	push	{r7}
 8000232:	b085      	sub	sp, #20
 8000234:	af00      	add	r7, sp, #0
 8000236:	6078      	str	r0, [r7, #4]
	/*Reload with number of clock per millisecond*/
	SysTick->LOAD = SYSTICK_LOAD_VAL;
 8000238:	4b11      	ldr	r3, [pc, #68]	@ (8000280 <systickDelayMs+0x50>)
 800023a:	f44f 527a 	mov.w	r2, #16000	@ 0x3e80
 800023e:	605a      	str	r2, [r3, #4]


	/*clear the  systick current value register*/
	SysTick->VAL = 0;
 8000240:	4b0f      	ldr	r3, [pc, #60]	@ (8000280 <systickDelayMs+0x50>)
 8000242:	2200      	movs	r2, #0
 8000244:	609a      	str	r2, [r3, #8]

	/* Enable systick and select internal clk src*/
	SysTick->CTRL = CTRL_ENABLE | CTRL_CLKSRC;
 8000246:	4b0e      	ldr	r3, [pc, #56]	@ (8000280 <systickDelayMs+0x50>)
 8000248:	2205      	movs	r2, #5
 800024a:	601a      	str	r2, [r3, #0]

	for(int i=0; i<delay; i++)
 800024c:	2300      	movs	r3, #0
 800024e:	60fb      	str	r3, [r7, #12]
 8000250:	e009      	b.n	8000266 <systickDelayMs+0x36>
	{
		/*waite until the count flag is set*/
		while((	SysTick->CTRL & CTRL_COUNTFLAG) == 0 ) {}
 8000252:	bf00      	nop
 8000254:	4b0a      	ldr	r3, [pc, #40]	@ (8000280 <systickDelayMs+0x50>)
 8000256:	681b      	ldr	r3, [r3, #0]
 8000258:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800025c:	2b00      	cmp	r3, #0
 800025e:	d0f9      	beq.n	8000254 <systickDelayMs+0x24>
	for(int i=0; i<delay; i++)
 8000260:	68fb      	ldr	r3, [r7, #12]
 8000262:	3301      	adds	r3, #1
 8000264:	60fb      	str	r3, [r7, #12]
 8000266:	68fa      	ldr	r2, [r7, #12]
 8000268:	687b      	ldr	r3, [r7, #4]
 800026a:	429a      	cmp	r2, r3
 800026c:	dbf1      	blt.n	8000252 <systickDelayMs+0x22>
	}

	SysTick->CTRL = 0;
 800026e:	4b04      	ldr	r3, [pc, #16]	@ (8000280 <systickDelayMs+0x50>)
 8000270:	2200      	movs	r2, #0
 8000272:	601a      	str	r2, [r3, #0]

}
 8000274:	bf00      	nop
 8000276:	3714      	adds	r7, #20
 8000278:	46bd      	mov	sp, r7
 800027a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800027e:	4770      	bx	lr
 8000280:	e000e010 	.word	0xe000e010

08000284 <uart2_rxtx_init>:

void uart2_write(char ch);
void uart2_write_string(char *str);

void uart2_rxtx_init(void)
{
 8000284:	b480      	push	{r7}
 8000286:	af00      	add	r7, sp, #0
    /* Enable clock access to GPIOA */
    RCC->AHB1ENR |= GPIOAEN;
 8000288:	4b27      	ldr	r3, [pc, #156]	@ (8000328 <uart2_rxtx_init+0xa4>)
 800028a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800028c:	4a26      	ldr	r2, [pc, #152]	@ (8000328 <uart2_rxtx_init+0xa4>)
 800028e:	f043 0301 	orr.w	r3, r3, #1
 8000292:	6313      	str	r3, [r2, #48]	@ 0x30

    /* Set PA2 to alternate function mode (AF7 - USART2_TX) */
    GPIOA->MODER &= ~(3U << 4);    // Clear bits
 8000294:	4b25      	ldr	r3, [pc, #148]	@ (800032c <uart2_rxtx_init+0xa8>)
 8000296:	681b      	ldr	r3, [r3, #0]
 8000298:	4a24      	ldr	r2, [pc, #144]	@ (800032c <uart2_rxtx_init+0xa8>)
 800029a:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 800029e:	6013      	str	r3, [r2, #0]
    GPIOA->MODER |=  (2U << 4);    // Set to AF mode
 80002a0:	4b22      	ldr	r3, [pc, #136]	@ (800032c <uart2_rxtx_init+0xa8>)
 80002a2:	681b      	ldr	r3, [r3, #0]
 80002a4:	4a21      	ldr	r2, [pc, #132]	@ (800032c <uart2_rxtx_init+0xa8>)
 80002a6:	f043 0320 	orr.w	r3, r3, #32
 80002aa:	6013      	str	r3, [r2, #0]
    GPIOA->AFR[0]  &= ~(0xFU << 8);
 80002ac:	4b1f      	ldr	r3, [pc, #124]	@ (800032c <uart2_rxtx_init+0xa8>)
 80002ae:	6a1b      	ldr	r3, [r3, #32]
 80002b0:	4a1e      	ldr	r2, [pc, #120]	@ (800032c <uart2_rxtx_init+0xa8>)
 80002b2:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80002b6:	6213      	str	r3, [r2, #32]
    GPIOA->AFR[0]  |=  (7U << 8);
 80002b8:	4b1c      	ldr	r3, [pc, #112]	@ (800032c <uart2_rxtx_init+0xa8>)
 80002ba:	6a1b      	ldr	r3, [r3, #32]
 80002bc:	4a1b      	ldr	r2, [pc, #108]	@ (800032c <uart2_rxtx_init+0xa8>)
 80002be:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80002c2:	6213      	str	r3, [r2, #32]

    /* Set PA3 to alternate function mode (AF7 - USART2_RX) */
    GPIOA->MODER &= ~(3U << 6);
 80002c4:	4b19      	ldr	r3, [pc, #100]	@ (800032c <uart2_rxtx_init+0xa8>)
 80002c6:	681b      	ldr	r3, [r3, #0]
 80002c8:	4a18      	ldr	r2, [pc, #96]	@ (800032c <uart2_rxtx_init+0xa8>)
 80002ca:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 80002ce:	6013      	str	r3, [r2, #0]
    GPIOA->MODER |=  (2U << 6);
 80002d0:	4b16      	ldr	r3, [pc, #88]	@ (800032c <uart2_rxtx_init+0xa8>)
 80002d2:	681b      	ldr	r3, [r3, #0]
 80002d4:	4a15      	ldr	r2, [pc, #84]	@ (800032c <uart2_rxtx_init+0xa8>)
 80002d6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80002da:	6013      	str	r3, [r2, #0]
    GPIOA->AFR[0]  &= ~(0xFU << 12);
 80002dc:	4b13      	ldr	r3, [pc, #76]	@ (800032c <uart2_rxtx_init+0xa8>)
 80002de:	6a1b      	ldr	r3, [r3, #32]
 80002e0:	4a12      	ldr	r2, [pc, #72]	@ (800032c <uart2_rxtx_init+0xa8>)
 80002e2:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80002e6:	6213      	str	r3, [r2, #32]
    GPIOA->AFR[0]  |=  (7U << 12);
 80002e8:	4b10      	ldr	r3, [pc, #64]	@ (800032c <uart2_rxtx_init+0xa8>)
 80002ea:	6a1b      	ldr	r3, [r3, #32]
 80002ec:	4a0f      	ldr	r2, [pc, #60]	@ (800032c <uart2_rxtx_init+0xa8>)
 80002ee:	f443 43e0 	orr.w	r3, r3, #28672	@ 0x7000
 80002f2:	6213      	str	r3, [r2, #32]

    /* Enable clock access to USART2 */
    RCC->APB1ENR |= UART2EN;
 80002f4:	4b0c      	ldr	r3, [pc, #48]	@ (8000328 <uart2_rxtx_init+0xa4>)
 80002f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80002f8:	4a0b      	ldr	r2, [pc, #44]	@ (8000328 <uart2_rxtx_init+0xa4>)
 80002fa:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80002fe:	6413      	str	r3, [r2, #64]	@ 0x40

    /* Set baudrate */
    USART2->BRR = APB1_CLK / UART_BAUDRATE;
 8000300:	4b0b      	ldr	r3, [pc, #44]	@ (8000330 <uart2_rxtx_init+0xac>)
 8000302:	228a      	movs	r2, #138	@ 0x8a
 8000304:	609a      	str	r2, [r3, #8]

    /* Enable TX and RX */
    USART2->CR1 |= (CR1_TE | CR1_RE);
 8000306:	4b0a      	ldr	r3, [pc, #40]	@ (8000330 <uart2_rxtx_init+0xac>)
 8000308:	68db      	ldr	r3, [r3, #12]
 800030a:	4a09      	ldr	r2, [pc, #36]	@ (8000330 <uart2_rxtx_init+0xac>)
 800030c:	f043 030c 	orr.w	r3, r3, #12
 8000310:	60d3      	str	r3, [r2, #12]

    /* Enable USART2 */
    USART2->CR1 |= CR1_UE;
 8000312:	4b07      	ldr	r3, [pc, #28]	@ (8000330 <uart2_rxtx_init+0xac>)
 8000314:	68db      	ldr	r3, [r3, #12]
 8000316:	4a06      	ldr	r2, [pc, #24]	@ (8000330 <uart2_rxtx_init+0xac>)
 8000318:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800031c:	60d3      	str	r3, [r2, #12]
}
 800031e:	bf00      	nop
 8000320:	46bd      	mov	sp, r7
 8000322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000326:	4770      	bx	lr
 8000328:	40023800 	.word	0x40023800
 800032c:	40020000 	.word	0x40020000
 8000330:	40004400 	.word	0x40004400

08000334 <uart2_write>:

void uart2_write(char ch)
{
 8000334:	b480      	push	{r7}
 8000336:	b083      	sub	sp, #12
 8000338:	af00      	add	r7, sp, #0
 800033a:	4603      	mov	r3, r0
 800033c:	71fb      	strb	r3, [r7, #7]
    /* Wait until TXE is set */
    while (!(USART2->SR & SR_TXE));
 800033e:	bf00      	nop
 8000340:	4b07      	ldr	r3, [pc, #28]	@ (8000360 <uart2_write+0x2c>)
 8000342:	681b      	ldr	r3, [r3, #0]
 8000344:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000348:	2b00      	cmp	r3, #0
 800034a:	d0f9      	beq.n	8000340 <uart2_write+0xc>
    USART2->DR = (ch & 0xFF);  // Ensure only 8 bits are written
 800034c:	4a04      	ldr	r2, [pc, #16]	@ (8000360 <uart2_write+0x2c>)
 800034e:	79fb      	ldrb	r3, [r7, #7]
 8000350:	6053      	str	r3, [r2, #4]
}
 8000352:	bf00      	nop
 8000354:	370c      	adds	r7, #12
 8000356:	46bd      	mov	sp, r7
 8000358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800035c:	4770      	bx	lr
 800035e:	bf00      	nop
 8000360:	40004400 	.word	0x40004400

08000364 <uart2_write_string>:

void uart2_write_string(char *str)
{
 8000364:	b580      	push	{r7, lr}
 8000366:	b082      	sub	sp, #8
 8000368:	af00      	add	r7, sp, #0
 800036a:	6078      	str	r0, [r7, #4]
    while (*str)
 800036c:	e006      	b.n	800037c <uart2_write_string+0x18>
    {
        uart2_write(*str++);
 800036e:	687b      	ldr	r3, [r7, #4]
 8000370:	1c5a      	adds	r2, r3, #1
 8000372:	607a      	str	r2, [r7, #4]
 8000374:	781b      	ldrb	r3, [r3, #0]
 8000376:	4618      	mov	r0, r3
 8000378:	f7ff ffdc 	bl	8000334 <uart2_write>
    while (*str)
 800037c:	687b      	ldr	r3, [r7, #4]
 800037e:	781b      	ldrb	r3, [r3, #0]
 8000380:	2b00      	cmp	r3, #0
 8000382:	d1f4      	bne.n	800036e <uart2_write_string+0xa>
    }
}
 8000384:	bf00      	nop
 8000386:	bf00      	nop
 8000388:	3708      	adds	r7, #8
 800038a:	46bd      	mov	sp, r7
 800038c:	bd80      	pop	{r7, pc}
	...

08000390 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000390:	480d      	ldr	r0, [pc, #52]	@ (80003c8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000392:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000394:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000398:	480c      	ldr	r0, [pc, #48]	@ (80003cc <LoopForever+0x6>)
  ldr r1, =_edata
 800039a:	490d      	ldr	r1, [pc, #52]	@ (80003d0 <LoopForever+0xa>)
  ldr r2, =_sidata
 800039c:	4a0d      	ldr	r2, [pc, #52]	@ (80003d4 <LoopForever+0xe>)
  movs r3, #0
 800039e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80003a0:	e002      	b.n	80003a8 <LoopCopyDataInit>

080003a2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80003a2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80003a4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80003a6:	3304      	adds	r3, #4

080003a8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80003a8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80003aa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80003ac:	d3f9      	bcc.n	80003a2 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80003ae:	4a0a      	ldr	r2, [pc, #40]	@ (80003d8 <LoopForever+0x12>)
  ldr r4, =_ebss
 80003b0:	4c0a      	ldr	r4, [pc, #40]	@ (80003dc <LoopForever+0x16>)
  movs r3, #0
 80003b2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80003b4:	e001      	b.n	80003ba <LoopFillZerobss>

080003b6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80003b6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80003b8:	3204      	adds	r2, #4

080003ba <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80003ba:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80003bc:	d3fb      	bcc.n	80003b6 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80003be:	f000 f811 	bl	80003e4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80003c2:	f7ff ff09 	bl	80001d8 <main>

080003c6 <LoopForever>:

LoopForever:
  b LoopForever
 80003c6:	e7fe      	b.n	80003c6 <LoopForever>
  ldr   r0, =_estack
 80003c8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80003cc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80003d0:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 80003d4:	0800045c 	.word	0x0800045c
  ldr r2, =_sbss
 80003d8:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 80003dc:	2000001c 	.word	0x2000001c

080003e0 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80003e0:	e7fe      	b.n	80003e0 <ADC_IRQHandler>
	...

080003e4 <__libc_init_array>:
 80003e4:	b570      	push	{r4, r5, r6, lr}
 80003e6:	4d0d      	ldr	r5, [pc, #52]	@ (800041c <__libc_init_array+0x38>)
 80003e8:	4c0d      	ldr	r4, [pc, #52]	@ (8000420 <__libc_init_array+0x3c>)
 80003ea:	1b64      	subs	r4, r4, r5
 80003ec:	10a4      	asrs	r4, r4, #2
 80003ee:	2600      	movs	r6, #0
 80003f0:	42a6      	cmp	r6, r4
 80003f2:	d109      	bne.n	8000408 <__libc_init_array+0x24>
 80003f4:	4d0b      	ldr	r5, [pc, #44]	@ (8000424 <__libc_init_array+0x40>)
 80003f6:	4c0c      	ldr	r4, [pc, #48]	@ (8000428 <__libc_init_array+0x44>)
 80003f8:	f000 f818 	bl	800042c <_init>
 80003fc:	1b64      	subs	r4, r4, r5
 80003fe:	10a4      	asrs	r4, r4, #2
 8000400:	2600      	movs	r6, #0
 8000402:	42a6      	cmp	r6, r4
 8000404:	d105      	bne.n	8000412 <__libc_init_array+0x2e>
 8000406:	bd70      	pop	{r4, r5, r6, pc}
 8000408:	f855 3b04 	ldr.w	r3, [r5], #4
 800040c:	4798      	blx	r3
 800040e:	3601      	adds	r6, #1
 8000410:	e7ee      	b.n	80003f0 <__libc_init_array+0xc>
 8000412:	f855 3b04 	ldr.w	r3, [r5], #4
 8000416:	4798      	blx	r3
 8000418:	3601      	adds	r6, #1
 800041a:	e7f2      	b.n	8000402 <__libc_init_array+0x1e>
 800041c:	08000454 	.word	0x08000454
 8000420:	08000454 	.word	0x08000454
 8000424:	08000454 	.word	0x08000454
 8000428:	08000458 	.word	0x08000458

0800042c <_init>:
 800042c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800042e:	bf00      	nop
 8000430:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000432:	bc08      	pop	{r3}
 8000434:	469e      	mov	lr, r3
 8000436:	4770      	bx	lr

08000438 <_fini>:
 8000438:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800043a:	bf00      	nop
 800043c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800043e:	bc08      	pop	{r3}
 8000440:	469e      	mov	lr, r3
 8000442:	4770      	bx	lr
