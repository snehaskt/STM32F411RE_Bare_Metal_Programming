
9.1_ADC_LDR_interfacing.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000d1c  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000068  08000ebc  08000ebc  00001ebc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08000f24  08000f24  00002050  2**0
                  CONTENTS
  4 .ARM          00000008  08000f24  08000f24  00001f24  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08000f2c  08000f2c  00002050  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000f2c  08000f2c  00001f2c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08000f30  08000f30  00001f30  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000050  20000000  08000f34  00002000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000016c  20000050  08000f84  00002050  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001bc  08000f84  000021bc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00002050  2**0
                  CONTENTS, READONLY
 12 .debug_info   00000a91  00000000  00000000  00002080  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000040c  00000000  00000000  00002b11  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000000c8  00000000  00000000  00002f20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000007e  00000000  00000000  00002fe8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000ee43  00000000  00000000  00003066  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00001871  00000000  00000000  00011ea9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00053ed0  00000000  00000000  0001371a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000675ea  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000006b4  00000000  00000000  00067630  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006a  00000000  00000000  00067ce4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000050 	.word	0x20000050
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08000ea4 	.word	0x08000ea4

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000054 	.word	0x20000054
 80001dc:	08000ea4 	.word	0x08000ea4

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <pa1_adc_init>:

// ADC1_1 this refers that ADC1 is having 3 channels 1,2&3 but we
// are connecting to the channel 1 so 1 is connected to PA1.

void pa1_adc_init(void)
{
 8000280:	b480      	push	{r7}
 8000282:	af00      	add	r7, sp, #0
	/*****configure the ADC GPIO pin*****/

	/**Enable clock access to the GPIOA**/
	RCC->AHB1ENR |= GPIOAEN;
 8000284:	4b14      	ldr	r3, [pc, #80]	@ (80002d8 <pa1_adc_init+0x58>)
 8000286:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000288:	4a13      	ldr	r2, [pc, #76]	@ (80002d8 <pa1_adc_init+0x58>)
 800028a:	f043 0301 	orr.w	r3, r3, #1
 800028e:	6313      	str	r3, [r2, #48]	@ 0x30

	/*set the mode of pa1 to analog mode*/
	// pin1
	// bit 2, bit 3 [11] - analog mode

	GPIOA -> MODER |= (1U<<2);
 8000290:	4b12      	ldr	r3, [pc, #72]	@ (80002dc <pa1_adc_init+0x5c>)
 8000292:	681b      	ldr	r3, [r3, #0]
 8000294:	4a11      	ldr	r2, [pc, #68]	@ (80002dc <pa1_adc_init+0x5c>)
 8000296:	f043 0304 	orr.w	r3, r3, #4
 800029a:	6013      	str	r3, [r2, #0]
	GPIOA -> MODER |= (1U<<3);
 800029c:	4b0f      	ldr	r3, [pc, #60]	@ (80002dc <pa1_adc_init+0x5c>)
 800029e:	681b      	ldr	r3, [r3, #0]
 80002a0:	4a0e      	ldr	r2, [pc, #56]	@ (80002dc <pa1_adc_init+0x5c>)
 80002a2:	f043 0308 	orr.w	r3, r3, #8
 80002a6:	6013      	str	r3, [r2, #0]

	/*****configuring the ADC module*****/

	/*Enable clock access to ADC*/

	RCC->APB2ENR |= ADC1EN;
 80002a8:	4b0b      	ldr	r3, [pc, #44]	@ (80002d8 <pa1_adc_init+0x58>)
 80002aa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80002ac:	4a0a      	ldr	r2, [pc, #40]	@ (80002d8 <pa1_adc_init+0x58>)
 80002ae:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80002b2:	6453      	str	r3, [r2, #68]	@ 0x44
	 * first = ch5
	 * second = ch3
	 * third = ch2
	 * */

	ADC1 -> SQR3 |= ADC_CH1;
 80002b4:	4b0a      	ldr	r3, [pc, #40]	@ (80002e0 <pa1_adc_init+0x60>)
 80002b6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80002b8:	4a09      	ldr	r2, [pc, #36]	@ (80002e0 <pa1_adc_init+0x60>)
 80002ba:	f043 0301 	orr.w	r3, r3, #1
 80002be:	6353      	str	r3, [r2, #52]	@ 0x34

	/*conversion sequence length*/

	ADC1->SQR1 = ADC_SEQ_LEN_1;
 80002c0:	4b07      	ldr	r3, [pc, #28]	@ (80002e0 <pa1_adc_init+0x60>)
 80002c2:	2200      	movs	r2, #0
 80002c4:	62da      	str	r2, [r3, #44]	@ 0x2c
	// Bit 0 ADON: A/D Converter ON / OFF
	//This bit is set and cleared by software.
	//Note: 0: Disable ADC conversion and go to power down mode
	//      1: Enable ADC

	ADC1->CR2 = CR2_ADON;
 80002c6:	4b06      	ldr	r3, [pc, #24]	@ (80002e0 <pa1_adc_init+0x60>)
 80002c8:	2201      	movs	r2, #1
 80002ca:	609a      	str	r2, [r3, #8]

}
 80002cc:	bf00      	nop
 80002ce:	46bd      	mov	sp, r7
 80002d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002d4:	4770      	bx	lr
 80002d6:	bf00      	nop
 80002d8:	40023800 	.word	0x40023800
 80002dc:	40020000 	.word	0x40020000
 80002e0:	40012000 	.word	0x40012000

080002e4 <start_conversion>:


void start_conversion (void)
{
 80002e4:	b480      	push	{r7}
 80002e6:	af00      	add	r7, sp, #0

	/*Enable continuous conversion mode*/
	ADC1->CR2 |= CR2_CONT;
 80002e8:	4b08      	ldr	r3, [pc, #32]	@ (800030c <start_conversion+0x28>)
 80002ea:	689b      	ldr	r3, [r3, #8]
 80002ec:	4a07      	ldr	r2, [pc, #28]	@ (800030c <start_conversion+0x28>)
 80002ee:	f043 0302 	orr.w	r3, r3, #2
 80002f2:	6093      	str	r3, [r2, #8]
	//0: Reset state
	//1: Starts conversion of regular channels
	//Note: This bit can be set only when ADON = 1 otherwise no conversion is launched


	ADC1->CR2 |= CR2_SWSTART;
 80002f4:	4b05      	ldr	r3, [pc, #20]	@ (800030c <start_conversion+0x28>)
 80002f6:	689b      	ldr	r3, [r3, #8]
 80002f8:	4a04      	ldr	r2, [pc, #16]	@ (800030c <start_conversion+0x28>)
 80002fa:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80002fe:	6093      	str	r3, [r2, #8]
}
 8000300:	bf00      	nop
 8000302:	46bd      	mov	sp, r7
 8000304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000308:	4770      	bx	lr
 800030a:	bf00      	nop
 800030c:	40012000 	.word	0x40012000

08000310 <adc_read>:

uint32_t adc_read (void)
{
 8000310:	b480      	push	{r7}
 8000312:	af00      	add	r7, sp, #0

	//it will return the true or false if the conversion completed true and continue for next line.
	// if it false check untill it write true.


	while(!(ADC1->SR & SR_EOC)){}
 8000314:	bf00      	nop
 8000316:	4b06      	ldr	r3, [pc, #24]	@ (8000330 <adc_read+0x20>)
 8000318:	681b      	ldr	r3, [r3, #0]
 800031a:	f003 0302 	and.w	r3, r3, #2
 800031e:	2b00      	cmp	r3, #0
 8000320:	d0f9      	beq.n	8000316 <adc_read+0x6>

	/* return adc_read*/

	return (ADC1-> DR);
 8000322:	4b03      	ldr	r3, [pc, #12]	@ (8000330 <adc_read+0x20>)
 8000324:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c

}
 8000326:	4618      	mov	r0, r3
 8000328:	46bd      	mov	sp, r7
 800032a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800032e:	4770      	bx	lr
 8000330:	40012000 	.word	0x40012000

08000334 <main>:
#define LIGHT_THRESHOLD 2000  // Adjust based on LDR calibration (12-bit ADC: 0–4095)

uint32_t sensor_value;

int main(void)
{
 8000334:	b580      	push	{r7, lr}
 8000336:	b08e      	sub	sp, #56	@ 0x38
 8000338:	af00      	add	r7, sp, #0
    uart2_rxtx_init();
 800033a:	f000 f86b 	bl	8000414 <uart2_rxtx_init>
    pa1_adc_init();
 800033e:	f7ff ff9f 	bl	8000280 <pa1_adc_init>

    char buffer[50];

    while (1)
    {
        start_conversion();
 8000342:	f7ff ffcf 	bl	80002e4 <start_conversion>
        sensor_value = adc_read();
 8000346:	f7ff ffe3 	bl	8000310 <adc_read>
 800034a:	4603      	mov	r3, r0
 800034c:	4a11      	ldr	r2, [pc, #68]	@ (8000394 <main+0x60>)
 800034e:	6013      	str	r3, [r2, #0]

        // Convert ADC value to string and print
        sprintf(buffer, "Sensor value: %lu\r\n", sensor_value);
 8000350:	4b10      	ldr	r3, [pc, #64]	@ (8000394 <main+0x60>)
 8000352:	681a      	ldr	r2, [r3, #0]
 8000354:	1d3b      	adds	r3, r7, #4
 8000356:	4910      	ldr	r1, [pc, #64]	@ (8000398 <main+0x64>)
 8000358:	4618      	mov	r0, r3
 800035a:	f000 f90b 	bl	8000574 <siprintf>
        uart2_write_string(buffer);
 800035e:	1d3b      	adds	r3, r7, #4
 8000360:	4618      	mov	r0, r3
 8000362:	f000 f8c7 	bl	80004f4 <uart2_write_string>

        if (sensor_value > LIGHT_THRESHOLD)
 8000366:	4b0b      	ldr	r3, [pc, #44]	@ (8000394 <main+0x60>)
 8000368:	681b      	ldr	r3, [r3, #0]
 800036a:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 800036e:	d903      	bls.n	8000378 <main+0x44>
        {
            uart2_write_string("Light is ON\r\n");
 8000370:	480a      	ldr	r0, [pc, #40]	@ (800039c <main+0x68>)
 8000372:	f000 f8bf 	bl	80004f4 <uart2_write_string>
 8000376:	e002      	b.n	800037e <main+0x4a>
        }
        else
        {
            uart2_write_string("Light is OFF\r\n");
 8000378:	4809      	ldr	r0, [pc, #36]	@ (80003a0 <main+0x6c>)
 800037a:	f000 f8bb 	bl	80004f4 <uart2_write_string>
        }

        for (volatile int i = 0; i < 10000000; i++); // Delay
 800037e:	2300      	movs	r3, #0
 8000380:	603b      	str	r3, [r7, #0]
 8000382:	e002      	b.n	800038a <main+0x56>
 8000384:	683b      	ldr	r3, [r7, #0]
 8000386:	3301      	adds	r3, #1
 8000388:	603b      	str	r3, [r7, #0]
 800038a:	683b      	ldr	r3, [r7, #0]
 800038c:	4a05      	ldr	r2, [pc, #20]	@ (80003a4 <main+0x70>)
 800038e:	4293      	cmp	r3, r2
 8000390:	dbf8      	blt.n	8000384 <main+0x50>
        start_conversion();
 8000392:	e7d6      	b.n	8000342 <main+0xe>
 8000394:	2000006c 	.word	0x2000006c
 8000398:	08000ebc 	.word	0x08000ebc
 800039c:	08000ed0 	.word	0x08000ed0
 80003a0:	08000ee0 	.word	0x08000ee0
 80003a4:	00989680 	.word	0x00989680

080003a8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80003a8:	b580      	push	{r7, lr}
 80003aa:	b086      	sub	sp, #24
 80003ac:	af00      	add	r7, sp, #0
 80003ae:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80003b0:	4a14      	ldr	r2, [pc, #80]	@ (8000404 <_sbrk+0x5c>)
 80003b2:	4b15      	ldr	r3, [pc, #84]	@ (8000408 <_sbrk+0x60>)
 80003b4:	1ad3      	subs	r3, r2, r3
 80003b6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80003b8:	697b      	ldr	r3, [r7, #20]
 80003ba:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80003bc:	4b13      	ldr	r3, [pc, #76]	@ (800040c <_sbrk+0x64>)
 80003be:	681b      	ldr	r3, [r3, #0]
 80003c0:	2b00      	cmp	r3, #0
 80003c2:	d102      	bne.n	80003ca <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80003c4:	4b11      	ldr	r3, [pc, #68]	@ (800040c <_sbrk+0x64>)
 80003c6:	4a12      	ldr	r2, [pc, #72]	@ (8000410 <_sbrk+0x68>)
 80003c8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80003ca:	4b10      	ldr	r3, [pc, #64]	@ (800040c <_sbrk+0x64>)
 80003cc:	681a      	ldr	r2, [r3, #0]
 80003ce:	687b      	ldr	r3, [r7, #4]
 80003d0:	4413      	add	r3, r2
 80003d2:	693a      	ldr	r2, [r7, #16]
 80003d4:	429a      	cmp	r2, r3
 80003d6:	d207      	bcs.n	80003e8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80003d8:	f000 f8ec 	bl	80005b4 <__errno>
 80003dc:	4603      	mov	r3, r0
 80003de:	220c      	movs	r2, #12
 80003e0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80003e2:	f04f 33ff 	mov.w	r3, #4294967295
 80003e6:	e009      	b.n	80003fc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80003e8:	4b08      	ldr	r3, [pc, #32]	@ (800040c <_sbrk+0x64>)
 80003ea:	681b      	ldr	r3, [r3, #0]
 80003ec:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80003ee:	4b07      	ldr	r3, [pc, #28]	@ (800040c <_sbrk+0x64>)
 80003f0:	681a      	ldr	r2, [r3, #0]
 80003f2:	687b      	ldr	r3, [r7, #4]
 80003f4:	4413      	add	r3, r2
 80003f6:	4a05      	ldr	r2, [pc, #20]	@ (800040c <_sbrk+0x64>)
 80003f8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80003fa:	68fb      	ldr	r3, [r7, #12]
}
 80003fc:	4618      	mov	r0, r3
 80003fe:	3718      	adds	r7, #24
 8000400:	46bd      	mov	sp, r7
 8000402:	bd80      	pop	{r7, pc}
 8000404:	20020000 	.word	0x20020000
 8000408:	00000400 	.word	0x00000400
 800040c:	20000070 	.word	0x20000070
 8000410:	200001c0 	.word	0x200001c0

08000414 <uart2_rxtx_init>:

void uart2_write(char ch);
void uart2_write_string(char *str);

void uart2_rxtx_init(void)
{
 8000414:	b480      	push	{r7}
 8000416:	af00      	add	r7, sp, #0
    /* Enable clock access to GPIOA */
    RCC->AHB1ENR |= GPIOAEN;
 8000418:	4b27      	ldr	r3, [pc, #156]	@ (80004b8 <uart2_rxtx_init+0xa4>)
 800041a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800041c:	4a26      	ldr	r2, [pc, #152]	@ (80004b8 <uart2_rxtx_init+0xa4>)
 800041e:	f043 0301 	orr.w	r3, r3, #1
 8000422:	6313      	str	r3, [r2, #48]	@ 0x30

    /* Set PA2 to alternate function mode (AF7 - USART2_TX) */
    GPIOA->MODER &= ~(3U << 4);    // Clear bits
 8000424:	4b25      	ldr	r3, [pc, #148]	@ (80004bc <uart2_rxtx_init+0xa8>)
 8000426:	681b      	ldr	r3, [r3, #0]
 8000428:	4a24      	ldr	r2, [pc, #144]	@ (80004bc <uart2_rxtx_init+0xa8>)
 800042a:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 800042e:	6013      	str	r3, [r2, #0]
    GPIOA->MODER |=  (2U << 4);    // Set to AF mode
 8000430:	4b22      	ldr	r3, [pc, #136]	@ (80004bc <uart2_rxtx_init+0xa8>)
 8000432:	681b      	ldr	r3, [r3, #0]
 8000434:	4a21      	ldr	r2, [pc, #132]	@ (80004bc <uart2_rxtx_init+0xa8>)
 8000436:	f043 0320 	orr.w	r3, r3, #32
 800043a:	6013      	str	r3, [r2, #0]
    GPIOA->AFR[0]  &= ~(0xFU << 8);
 800043c:	4b1f      	ldr	r3, [pc, #124]	@ (80004bc <uart2_rxtx_init+0xa8>)
 800043e:	6a1b      	ldr	r3, [r3, #32]
 8000440:	4a1e      	ldr	r2, [pc, #120]	@ (80004bc <uart2_rxtx_init+0xa8>)
 8000442:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8000446:	6213      	str	r3, [r2, #32]
    GPIOA->AFR[0]  |=  (7U << 8);
 8000448:	4b1c      	ldr	r3, [pc, #112]	@ (80004bc <uart2_rxtx_init+0xa8>)
 800044a:	6a1b      	ldr	r3, [r3, #32]
 800044c:	4a1b      	ldr	r2, [pc, #108]	@ (80004bc <uart2_rxtx_init+0xa8>)
 800044e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8000452:	6213      	str	r3, [r2, #32]

    /* Set PA3 to alternate function mode (AF7 - USART2_RX) */
    GPIOA->MODER &= ~(3U << 6);
 8000454:	4b19      	ldr	r3, [pc, #100]	@ (80004bc <uart2_rxtx_init+0xa8>)
 8000456:	681b      	ldr	r3, [r3, #0]
 8000458:	4a18      	ldr	r2, [pc, #96]	@ (80004bc <uart2_rxtx_init+0xa8>)
 800045a:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800045e:	6013      	str	r3, [r2, #0]
    GPIOA->MODER |=  (2U << 6);
 8000460:	4b16      	ldr	r3, [pc, #88]	@ (80004bc <uart2_rxtx_init+0xa8>)
 8000462:	681b      	ldr	r3, [r3, #0]
 8000464:	4a15      	ldr	r2, [pc, #84]	@ (80004bc <uart2_rxtx_init+0xa8>)
 8000466:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800046a:	6013      	str	r3, [r2, #0]
    GPIOA->AFR[0]  &= ~(0xFU << 12);
 800046c:	4b13      	ldr	r3, [pc, #76]	@ (80004bc <uart2_rxtx_init+0xa8>)
 800046e:	6a1b      	ldr	r3, [r3, #32]
 8000470:	4a12      	ldr	r2, [pc, #72]	@ (80004bc <uart2_rxtx_init+0xa8>)
 8000472:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8000476:	6213      	str	r3, [r2, #32]
    GPIOA->AFR[0]  |=  (7U << 12);
 8000478:	4b10      	ldr	r3, [pc, #64]	@ (80004bc <uart2_rxtx_init+0xa8>)
 800047a:	6a1b      	ldr	r3, [r3, #32]
 800047c:	4a0f      	ldr	r2, [pc, #60]	@ (80004bc <uart2_rxtx_init+0xa8>)
 800047e:	f443 43e0 	orr.w	r3, r3, #28672	@ 0x7000
 8000482:	6213      	str	r3, [r2, #32]

    /* Enable clock access to USART2 */
    RCC->APB1ENR |= UART2EN;
 8000484:	4b0c      	ldr	r3, [pc, #48]	@ (80004b8 <uart2_rxtx_init+0xa4>)
 8000486:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000488:	4a0b      	ldr	r2, [pc, #44]	@ (80004b8 <uart2_rxtx_init+0xa4>)
 800048a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800048e:	6413      	str	r3, [r2, #64]	@ 0x40

    /* Set baudrate */
    USART2->BRR = APB1_CLK / UART_BAUDRATE;
 8000490:	4b0b      	ldr	r3, [pc, #44]	@ (80004c0 <uart2_rxtx_init+0xac>)
 8000492:	228a      	movs	r2, #138	@ 0x8a
 8000494:	609a      	str	r2, [r3, #8]

    /* Enable TX and RX */
    USART2->CR1 |= (CR1_TE | CR1_RE);
 8000496:	4b0a      	ldr	r3, [pc, #40]	@ (80004c0 <uart2_rxtx_init+0xac>)
 8000498:	68db      	ldr	r3, [r3, #12]
 800049a:	4a09      	ldr	r2, [pc, #36]	@ (80004c0 <uart2_rxtx_init+0xac>)
 800049c:	f043 030c 	orr.w	r3, r3, #12
 80004a0:	60d3      	str	r3, [r2, #12]

    /* Enable USART2 */
    USART2->CR1 |= CR1_UE;
 80004a2:	4b07      	ldr	r3, [pc, #28]	@ (80004c0 <uart2_rxtx_init+0xac>)
 80004a4:	68db      	ldr	r3, [r3, #12]
 80004a6:	4a06      	ldr	r2, [pc, #24]	@ (80004c0 <uart2_rxtx_init+0xac>)
 80004a8:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80004ac:	60d3      	str	r3, [r2, #12]
}
 80004ae:	bf00      	nop
 80004b0:	46bd      	mov	sp, r7
 80004b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004b6:	4770      	bx	lr
 80004b8:	40023800 	.word	0x40023800
 80004bc:	40020000 	.word	0x40020000
 80004c0:	40004400 	.word	0x40004400

080004c4 <uart2_write>:

void uart2_write(char ch)
{
 80004c4:	b480      	push	{r7}
 80004c6:	b083      	sub	sp, #12
 80004c8:	af00      	add	r7, sp, #0
 80004ca:	4603      	mov	r3, r0
 80004cc:	71fb      	strb	r3, [r7, #7]
    /* Wait until TXE is set */
    while (!(USART2->SR & SR_TXE));
 80004ce:	bf00      	nop
 80004d0:	4b07      	ldr	r3, [pc, #28]	@ (80004f0 <uart2_write+0x2c>)
 80004d2:	681b      	ldr	r3, [r3, #0]
 80004d4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80004d8:	2b00      	cmp	r3, #0
 80004da:	d0f9      	beq.n	80004d0 <uart2_write+0xc>
    USART2->DR = (ch & 0xFF);  // Ensure only 8 bits are written
 80004dc:	4a04      	ldr	r2, [pc, #16]	@ (80004f0 <uart2_write+0x2c>)
 80004de:	79fb      	ldrb	r3, [r7, #7]
 80004e0:	6053      	str	r3, [r2, #4]
}
 80004e2:	bf00      	nop
 80004e4:	370c      	adds	r7, #12
 80004e6:	46bd      	mov	sp, r7
 80004e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004ec:	4770      	bx	lr
 80004ee:	bf00      	nop
 80004f0:	40004400 	.word	0x40004400

080004f4 <uart2_write_string>:

void uart2_write_string(char *str)
{
 80004f4:	b580      	push	{r7, lr}
 80004f6:	b082      	sub	sp, #8
 80004f8:	af00      	add	r7, sp, #0
 80004fa:	6078      	str	r0, [r7, #4]
    while (*str)
 80004fc:	e006      	b.n	800050c <uart2_write_string+0x18>
    {
        uart2_write(*str++);
 80004fe:	687b      	ldr	r3, [r7, #4]
 8000500:	1c5a      	adds	r2, r3, #1
 8000502:	607a      	str	r2, [r7, #4]
 8000504:	781b      	ldrb	r3, [r3, #0]
 8000506:	4618      	mov	r0, r3
 8000508:	f7ff ffdc 	bl	80004c4 <uart2_write>
    while (*str)
 800050c:	687b      	ldr	r3, [r7, #4]
 800050e:	781b      	ldrb	r3, [r3, #0]
 8000510:	2b00      	cmp	r3, #0
 8000512:	d1f4      	bne.n	80004fe <uart2_write_string+0xa>
    }
}
 8000514:	bf00      	nop
 8000516:	bf00      	nop
 8000518:	3708      	adds	r7, #8
 800051a:	46bd      	mov	sp, r7
 800051c:	bd80      	pop	{r7, pc}
	...

08000520 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000520:	480d      	ldr	r0, [pc, #52]	@ (8000558 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000522:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000524:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000528:	480c      	ldr	r0, [pc, #48]	@ (800055c <LoopForever+0x6>)
  ldr r1, =_edata
 800052a:	490d      	ldr	r1, [pc, #52]	@ (8000560 <LoopForever+0xa>)
  ldr r2, =_sidata
 800052c:	4a0d      	ldr	r2, [pc, #52]	@ (8000564 <LoopForever+0xe>)
  movs r3, #0
 800052e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000530:	e002      	b.n	8000538 <LoopCopyDataInit>

08000532 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000532:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000534:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000536:	3304      	adds	r3, #4

08000538 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000538:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800053a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800053c:	d3f9      	bcc.n	8000532 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800053e:	4a0a      	ldr	r2, [pc, #40]	@ (8000568 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000540:	4c0a      	ldr	r4, [pc, #40]	@ (800056c <LoopForever+0x16>)
  movs r3, #0
 8000542:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000544:	e001      	b.n	800054a <LoopFillZerobss>

08000546 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000546:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000548:	3204      	adds	r2, #4

0800054a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800054a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800054c:	d3fb      	bcc.n	8000546 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800054e:	f000 f837 	bl	80005c0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000552:	f7ff feef 	bl	8000334 <main>

08000556 <LoopForever>:

LoopForever:
  b LoopForever
 8000556:	e7fe      	b.n	8000556 <LoopForever>
  ldr   r0, =_estack
 8000558:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800055c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000560:	20000050 	.word	0x20000050
  ldr r2, =_sidata
 8000564:	08000f34 	.word	0x08000f34
  ldr r2, =_sbss
 8000568:	20000050 	.word	0x20000050
  ldr r4, =_ebss
 800056c:	200001bc 	.word	0x200001bc

08000570 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000570:	e7fe      	b.n	8000570 <ADC_IRQHandler>
	...

08000574 <siprintf>:
 8000574:	b40e      	push	{r1, r2, r3}
 8000576:	b500      	push	{lr}
 8000578:	b09c      	sub	sp, #112	@ 0x70
 800057a:	ab1d      	add	r3, sp, #116	@ 0x74
 800057c:	9002      	str	r0, [sp, #8]
 800057e:	9006      	str	r0, [sp, #24]
 8000580:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8000584:	4809      	ldr	r0, [pc, #36]	@ (80005ac <siprintf+0x38>)
 8000586:	9107      	str	r1, [sp, #28]
 8000588:	9104      	str	r1, [sp, #16]
 800058a:	4909      	ldr	r1, [pc, #36]	@ (80005b0 <siprintf+0x3c>)
 800058c:	f853 2b04 	ldr.w	r2, [r3], #4
 8000590:	9105      	str	r1, [sp, #20]
 8000592:	6800      	ldr	r0, [r0, #0]
 8000594:	9301      	str	r3, [sp, #4]
 8000596:	a902      	add	r1, sp, #8
 8000598:	f000 f98c 	bl	80008b4 <_svfiprintf_r>
 800059c:	9b02      	ldr	r3, [sp, #8]
 800059e:	2200      	movs	r2, #0
 80005a0:	701a      	strb	r2, [r3, #0]
 80005a2:	b01c      	add	sp, #112	@ 0x70
 80005a4:	f85d eb04 	ldr.w	lr, [sp], #4
 80005a8:	b003      	add	sp, #12
 80005aa:	4770      	bx	lr
 80005ac:	20000000 	.word	0x20000000
 80005b0:	ffff0208 	.word	0xffff0208

080005b4 <__errno>:
 80005b4:	4b01      	ldr	r3, [pc, #4]	@ (80005bc <__errno+0x8>)
 80005b6:	6818      	ldr	r0, [r3, #0]
 80005b8:	4770      	bx	lr
 80005ba:	bf00      	nop
 80005bc:	20000000 	.word	0x20000000

080005c0 <__libc_init_array>:
 80005c0:	b570      	push	{r4, r5, r6, lr}
 80005c2:	4d0d      	ldr	r5, [pc, #52]	@ (80005f8 <__libc_init_array+0x38>)
 80005c4:	4c0d      	ldr	r4, [pc, #52]	@ (80005fc <__libc_init_array+0x3c>)
 80005c6:	1b64      	subs	r4, r4, r5
 80005c8:	10a4      	asrs	r4, r4, #2
 80005ca:	2600      	movs	r6, #0
 80005cc:	42a6      	cmp	r6, r4
 80005ce:	d109      	bne.n	80005e4 <__libc_init_array+0x24>
 80005d0:	4d0b      	ldr	r5, [pc, #44]	@ (8000600 <__libc_init_array+0x40>)
 80005d2:	4c0c      	ldr	r4, [pc, #48]	@ (8000604 <__libc_init_array+0x44>)
 80005d4:	f000 fc66 	bl	8000ea4 <_init>
 80005d8:	1b64      	subs	r4, r4, r5
 80005da:	10a4      	asrs	r4, r4, #2
 80005dc:	2600      	movs	r6, #0
 80005de:	42a6      	cmp	r6, r4
 80005e0:	d105      	bne.n	80005ee <__libc_init_array+0x2e>
 80005e2:	bd70      	pop	{r4, r5, r6, pc}
 80005e4:	f855 3b04 	ldr.w	r3, [r5], #4
 80005e8:	4798      	blx	r3
 80005ea:	3601      	adds	r6, #1
 80005ec:	e7ee      	b.n	80005cc <__libc_init_array+0xc>
 80005ee:	f855 3b04 	ldr.w	r3, [r5], #4
 80005f2:	4798      	blx	r3
 80005f4:	3601      	adds	r6, #1
 80005f6:	e7f2      	b.n	80005de <__libc_init_array+0x1e>
 80005f8:	08000f2c 	.word	0x08000f2c
 80005fc:	08000f2c 	.word	0x08000f2c
 8000600:	08000f2c 	.word	0x08000f2c
 8000604:	08000f30 	.word	0x08000f30

08000608 <__retarget_lock_acquire_recursive>:
 8000608:	4770      	bx	lr

0800060a <__retarget_lock_release_recursive>:
 800060a:	4770      	bx	lr

0800060c <_free_r>:
 800060c:	b538      	push	{r3, r4, r5, lr}
 800060e:	4605      	mov	r5, r0
 8000610:	2900      	cmp	r1, #0
 8000612:	d041      	beq.n	8000698 <_free_r+0x8c>
 8000614:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8000618:	1f0c      	subs	r4, r1, #4
 800061a:	2b00      	cmp	r3, #0
 800061c:	bfb8      	it	lt
 800061e:	18e4      	addlt	r4, r4, r3
 8000620:	f000 f8e0 	bl	80007e4 <__malloc_lock>
 8000624:	4a1d      	ldr	r2, [pc, #116]	@ (800069c <_free_r+0x90>)
 8000626:	6813      	ldr	r3, [r2, #0]
 8000628:	b933      	cbnz	r3, 8000638 <_free_r+0x2c>
 800062a:	6063      	str	r3, [r4, #4]
 800062c:	6014      	str	r4, [r2, #0]
 800062e:	4628      	mov	r0, r5
 8000630:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000634:	f000 b8dc 	b.w	80007f0 <__malloc_unlock>
 8000638:	42a3      	cmp	r3, r4
 800063a:	d908      	bls.n	800064e <_free_r+0x42>
 800063c:	6820      	ldr	r0, [r4, #0]
 800063e:	1821      	adds	r1, r4, r0
 8000640:	428b      	cmp	r3, r1
 8000642:	bf01      	itttt	eq
 8000644:	6819      	ldreq	r1, [r3, #0]
 8000646:	685b      	ldreq	r3, [r3, #4]
 8000648:	1809      	addeq	r1, r1, r0
 800064a:	6021      	streq	r1, [r4, #0]
 800064c:	e7ed      	b.n	800062a <_free_r+0x1e>
 800064e:	461a      	mov	r2, r3
 8000650:	685b      	ldr	r3, [r3, #4]
 8000652:	b10b      	cbz	r3, 8000658 <_free_r+0x4c>
 8000654:	42a3      	cmp	r3, r4
 8000656:	d9fa      	bls.n	800064e <_free_r+0x42>
 8000658:	6811      	ldr	r1, [r2, #0]
 800065a:	1850      	adds	r0, r2, r1
 800065c:	42a0      	cmp	r0, r4
 800065e:	d10b      	bne.n	8000678 <_free_r+0x6c>
 8000660:	6820      	ldr	r0, [r4, #0]
 8000662:	4401      	add	r1, r0
 8000664:	1850      	adds	r0, r2, r1
 8000666:	4283      	cmp	r3, r0
 8000668:	6011      	str	r1, [r2, #0]
 800066a:	d1e0      	bne.n	800062e <_free_r+0x22>
 800066c:	6818      	ldr	r0, [r3, #0]
 800066e:	685b      	ldr	r3, [r3, #4]
 8000670:	6053      	str	r3, [r2, #4]
 8000672:	4408      	add	r0, r1
 8000674:	6010      	str	r0, [r2, #0]
 8000676:	e7da      	b.n	800062e <_free_r+0x22>
 8000678:	d902      	bls.n	8000680 <_free_r+0x74>
 800067a:	230c      	movs	r3, #12
 800067c:	602b      	str	r3, [r5, #0]
 800067e:	e7d6      	b.n	800062e <_free_r+0x22>
 8000680:	6820      	ldr	r0, [r4, #0]
 8000682:	1821      	adds	r1, r4, r0
 8000684:	428b      	cmp	r3, r1
 8000686:	bf04      	itt	eq
 8000688:	6819      	ldreq	r1, [r3, #0]
 800068a:	685b      	ldreq	r3, [r3, #4]
 800068c:	6063      	str	r3, [r4, #4]
 800068e:	bf04      	itt	eq
 8000690:	1809      	addeq	r1, r1, r0
 8000692:	6021      	streq	r1, [r4, #0]
 8000694:	6054      	str	r4, [r2, #4]
 8000696:	e7ca      	b.n	800062e <_free_r+0x22>
 8000698:	bd38      	pop	{r3, r4, r5, pc}
 800069a:	bf00      	nop
 800069c:	200001b8 	.word	0x200001b8

080006a0 <sbrk_aligned>:
 80006a0:	b570      	push	{r4, r5, r6, lr}
 80006a2:	4e0f      	ldr	r6, [pc, #60]	@ (80006e0 <sbrk_aligned+0x40>)
 80006a4:	460c      	mov	r4, r1
 80006a6:	6831      	ldr	r1, [r6, #0]
 80006a8:	4605      	mov	r5, r0
 80006aa:	b911      	cbnz	r1, 80006b2 <sbrk_aligned+0x12>
 80006ac:	f000 fba6 	bl	8000dfc <_sbrk_r>
 80006b0:	6030      	str	r0, [r6, #0]
 80006b2:	4621      	mov	r1, r4
 80006b4:	4628      	mov	r0, r5
 80006b6:	f000 fba1 	bl	8000dfc <_sbrk_r>
 80006ba:	1c43      	adds	r3, r0, #1
 80006bc:	d103      	bne.n	80006c6 <sbrk_aligned+0x26>
 80006be:	f04f 34ff 	mov.w	r4, #4294967295
 80006c2:	4620      	mov	r0, r4
 80006c4:	bd70      	pop	{r4, r5, r6, pc}
 80006c6:	1cc4      	adds	r4, r0, #3
 80006c8:	f024 0403 	bic.w	r4, r4, #3
 80006cc:	42a0      	cmp	r0, r4
 80006ce:	d0f8      	beq.n	80006c2 <sbrk_aligned+0x22>
 80006d0:	1a21      	subs	r1, r4, r0
 80006d2:	4628      	mov	r0, r5
 80006d4:	f000 fb92 	bl	8000dfc <_sbrk_r>
 80006d8:	3001      	adds	r0, #1
 80006da:	d1f2      	bne.n	80006c2 <sbrk_aligned+0x22>
 80006dc:	e7ef      	b.n	80006be <sbrk_aligned+0x1e>
 80006de:	bf00      	nop
 80006e0:	200001b4 	.word	0x200001b4

080006e4 <_malloc_r>:
 80006e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80006e8:	1ccd      	adds	r5, r1, #3
 80006ea:	f025 0503 	bic.w	r5, r5, #3
 80006ee:	3508      	adds	r5, #8
 80006f0:	2d0c      	cmp	r5, #12
 80006f2:	bf38      	it	cc
 80006f4:	250c      	movcc	r5, #12
 80006f6:	2d00      	cmp	r5, #0
 80006f8:	4606      	mov	r6, r0
 80006fa:	db01      	blt.n	8000700 <_malloc_r+0x1c>
 80006fc:	42a9      	cmp	r1, r5
 80006fe:	d904      	bls.n	800070a <_malloc_r+0x26>
 8000700:	230c      	movs	r3, #12
 8000702:	6033      	str	r3, [r6, #0]
 8000704:	2000      	movs	r0, #0
 8000706:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800070a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80007e0 <_malloc_r+0xfc>
 800070e:	f000 f869 	bl	80007e4 <__malloc_lock>
 8000712:	f8d8 3000 	ldr.w	r3, [r8]
 8000716:	461c      	mov	r4, r3
 8000718:	bb44      	cbnz	r4, 800076c <_malloc_r+0x88>
 800071a:	4629      	mov	r1, r5
 800071c:	4630      	mov	r0, r6
 800071e:	f7ff ffbf 	bl	80006a0 <sbrk_aligned>
 8000722:	1c43      	adds	r3, r0, #1
 8000724:	4604      	mov	r4, r0
 8000726:	d158      	bne.n	80007da <_malloc_r+0xf6>
 8000728:	f8d8 4000 	ldr.w	r4, [r8]
 800072c:	4627      	mov	r7, r4
 800072e:	2f00      	cmp	r7, #0
 8000730:	d143      	bne.n	80007ba <_malloc_r+0xd6>
 8000732:	2c00      	cmp	r4, #0
 8000734:	d04b      	beq.n	80007ce <_malloc_r+0xea>
 8000736:	6823      	ldr	r3, [r4, #0]
 8000738:	4639      	mov	r1, r7
 800073a:	4630      	mov	r0, r6
 800073c:	eb04 0903 	add.w	r9, r4, r3
 8000740:	f000 fb5c 	bl	8000dfc <_sbrk_r>
 8000744:	4581      	cmp	r9, r0
 8000746:	d142      	bne.n	80007ce <_malloc_r+0xea>
 8000748:	6821      	ldr	r1, [r4, #0]
 800074a:	1a6d      	subs	r5, r5, r1
 800074c:	4629      	mov	r1, r5
 800074e:	4630      	mov	r0, r6
 8000750:	f7ff ffa6 	bl	80006a0 <sbrk_aligned>
 8000754:	3001      	adds	r0, #1
 8000756:	d03a      	beq.n	80007ce <_malloc_r+0xea>
 8000758:	6823      	ldr	r3, [r4, #0]
 800075a:	442b      	add	r3, r5
 800075c:	6023      	str	r3, [r4, #0]
 800075e:	f8d8 3000 	ldr.w	r3, [r8]
 8000762:	685a      	ldr	r2, [r3, #4]
 8000764:	bb62      	cbnz	r2, 80007c0 <_malloc_r+0xdc>
 8000766:	f8c8 7000 	str.w	r7, [r8]
 800076a:	e00f      	b.n	800078c <_malloc_r+0xa8>
 800076c:	6822      	ldr	r2, [r4, #0]
 800076e:	1b52      	subs	r2, r2, r5
 8000770:	d420      	bmi.n	80007b4 <_malloc_r+0xd0>
 8000772:	2a0b      	cmp	r2, #11
 8000774:	d917      	bls.n	80007a6 <_malloc_r+0xc2>
 8000776:	1961      	adds	r1, r4, r5
 8000778:	42a3      	cmp	r3, r4
 800077a:	6025      	str	r5, [r4, #0]
 800077c:	bf18      	it	ne
 800077e:	6059      	strne	r1, [r3, #4]
 8000780:	6863      	ldr	r3, [r4, #4]
 8000782:	bf08      	it	eq
 8000784:	f8c8 1000 	streq.w	r1, [r8]
 8000788:	5162      	str	r2, [r4, r5]
 800078a:	604b      	str	r3, [r1, #4]
 800078c:	4630      	mov	r0, r6
 800078e:	f000 f82f 	bl	80007f0 <__malloc_unlock>
 8000792:	f104 000b 	add.w	r0, r4, #11
 8000796:	1d23      	adds	r3, r4, #4
 8000798:	f020 0007 	bic.w	r0, r0, #7
 800079c:	1ac2      	subs	r2, r0, r3
 800079e:	bf1c      	itt	ne
 80007a0:	1a1b      	subne	r3, r3, r0
 80007a2:	50a3      	strne	r3, [r4, r2]
 80007a4:	e7af      	b.n	8000706 <_malloc_r+0x22>
 80007a6:	6862      	ldr	r2, [r4, #4]
 80007a8:	42a3      	cmp	r3, r4
 80007aa:	bf0c      	ite	eq
 80007ac:	f8c8 2000 	streq.w	r2, [r8]
 80007b0:	605a      	strne	r2, [r3, #4]
 80007b2:	e7eb      	b.n	800078c <_malloc_r+0xa8>
 80007b4:	4623      	mov	r3, r4
 80007b6:	6864      	ldr	r4, [r4, #4]
 80007b8:	e7ae      	b.n	8000718 <_malloc_r+0x34>
 80007ba:	463c      	mov	r4, r7
 80007bc:	687f      	ldr	r7, [r7, #4]
 80007be:	e7b6      	b.n	800072e <_malloc_r+0x4a>
 80007c0:	461a      	mov	r2, r3
 80007c2:	685b      	ldr	r3, [r3, #4]
 80007c4:	42a3      	cmp	r3, r4
 80007c6:	d1fb      	bne.n	80007c0 <_malloc_r+0xdc>
 80007c8:	2300      	movs	r3, #0
 80007ca:	6053      	str	r3, [r2, #4]
 80007cc:	e7de      	b.n	800078c <_malloc_r+0xa8>
 80007ce:	230c      	movs	r3, #12
 80007d0:	6033      	str	r3, [r6, #0]
 80007d2:	4630      	mov	r0, r6
 80007d4:	f000 f80c 	bl	80007f0 <__malloc_unlock>
 80007d8:	e794      	b.n	8000704 <_malloc_r+0x20>
 80007da:	6005      	str	r5, [r0, #0]
 80007dc:	e7d6      	b.n	800078c <_malloc_r+0xa8>
 80007de:	bf00      	nop
 80007e0:	200001b8 	.word	0x200001b8

080007e4 <__malloc_lock>:
 80007e4:	4801      	ldr	r0, [pc, #4]	@ (80007ec <__malloc_lock+0x8>)
 80007e6:	f7ff bf0f 	b.w	8000608 <__retarget_lock_acquire_recursive>
 80007ea:	bf00      	nop
 80007ec:	200001b0 	.word	0x200001b0

080007f0 <__malloc_unlock>:
 80007f0:	4801      	ldr	r0, [pc, #4]	@ (80007f8 <__malloc_unlock+0x8>)
 80007f2:	f7ff bf0a 	b.w	800060a <__retarget_lock_release_recursive>
 80007f6:	bf00      	nop
 80007f8:	200001b0 	.word	0x200001b0

080007fc <__ssputs_r>:
 80007fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000800:	688e      	ldr	r6, [r1, #8]
 8000802:	461f      	mov	r7, r3
 8000804:	42be      	cmp	r6, r7
 8000806:	680b      	ldr	r3, [r1, #0]
 8000808:	4682      	mov	sl, r0
 800080a:	460c      	mov	r4, r1
 800080c:	4690      	mov	r8, r2
 800080e:	d82d      	bhi.n	800086c <__ssputs_r+0x70>
 8000810:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8000814:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8000818:	d026      	beq.n	8000868 <__ssputs_r+0x6c>
 800081a:	6965      	ldr	r5, [r4, #20]
 800081c:	6909      	ldr	r1, [r1, #16]
 800081e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8000822:	eba3 0901 	sub.w	r9, r3, r1
 8000826:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800082a:	1c7b      	adds	r3, r7, #1
 800082c:	444b      	add	r3, r9
 800082e:	106d      	asrs	r5, r5, #1
 8000830:	429d      	cmp	r5, r3
 8000832:	bf38      	it	cc
 8000834:	461d      	movcc	r5, r3
 8000836:	0553      	lsls	r3, r2, #21
 8000838:	d527      	bpl.n	800088a <__ssputs_r+0x8e>
 800083a:	4629      	mov	r1, r5
 800083c:	f7ff ff52 	bl	80006e4 <_malloc_r>
 8000840:	4606      	mov	r6, r0
 8000842:	b360      	cbz	r0, 800089e <__ssputs_r+0xa2>
 8000844:	6921      	ldr	r1, [r4, #16]
 8000846:	464a      	mov	r2, r9
 8000848:	f000 fae8 	bl	8000e1c <memcpy>
 800084c:	89a3      	ldrh	r3, [r4, #12]
 800084e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8000852:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000856:	81a3      	strh	r3, [r4, #12]
 8000858:	6126      	str	r6, [r4, #16]
 800085a:	6165      	str	r5, [r4, #20]
 800085c:	444e      	add	r6, r9
 800085e:	eba5 0509 	sub.w	r5, r5, r9
 8000862:	6026      	str	r6, [r4, #0]
 8000864:	60a5      	str	r5, [r4, #8]
 8000866:	463e      	mov	r6, r7
 8000868:	42be      	cmp	r6, r7
 800086a:	d900      	bls.n	800086e <__ssputs_r+0x72>
 800086c:	463e      	mov	r6, r7
 800086e:	6820      	ldr	r0, [r4, #0]
 8000870:	4632      	mov	r2, r6
 8000872:	4641      	mov	r1, r8
 8000874:	f000 faa8 	bl	8000dc8 <memmove>
 8000878:	68a3      	ldr	r3, [r4, #8]
 800087a:	1b9b      	subs	r3, r3, r6
 800087c:	60a3      	str	r3, [r4, #8]
 800087e:	6823      	ldr	r3, [r4, #0]
 8000880:	4433      	add	r3, r6
 8000882:	6023      	str	r3, [r4, #0]
 8000884:	2000      	movs	r0, #0
 8000886:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800088a:	462a      	mov	r2, r5
 800088c:	f000 fad4 	bl	8000e38 <_realloc_r>
 8000890:	4606      	mov	r6, r0
 8000892:	2800      	cmp	r0, #0
 8000894:	d1e0      	bne.n	8000858 <__ssputs_r+0x5c>
 8000896:	6921      	ldr	r1, [r4, #16]
 8000898:	4650      	mov	r0, sl
 800089a:	f7ff feb7 	bl	800060c <_free_r>
 800089e:	230c      	movs	r3, #12
 80008a0:	f8ca 3000 	str.w	r3, [sl]
 80008a4:	89a3      	ldrh	r3, [r4, #12]
 80008a6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80008aa:	81a3      	strh	r3, [r4, #12]
 80008ac:	f04f 30ff 	mov.w	r0, #4294967295
 80008b0:	e7e9      	b.n	8000886 <__ssputs_r+0x8a>
	...

080008b4 <_svfiprintf_r>:
 80008b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80008b8:	4698      	mov	r8, r3
 80008ba:	898b      	ldrh	r3, [r1, #12]
 80008bc:	061b      	lsls	r3, r3, #24
 80008be:	b09d      	sub	sp, #116	@ 0x74
 80008c0:	4607      	mov	r7, r0
 80008c2:	460d      	mov	r5, r1
 80008c4:	4614      	mov	r4, r2
 80008c6:	d510      	bpl.n	80008ea <_svfiprintf_r+0x36>
 80008c8:	690b      	ldr	r3, [r1, #16]
 80008ca:	b973      	cbnz	r3, 80008ea <_svfiprintf_r+0x36>
 80008cc:	2140      	movs	r1, #64	@ 0x40
 80008ce:	f7ff ff09 	bl	80006e4 <_malloc_r>
 80008d2:	6028      	str	r0, [r5, #0]
 80008d4:	6128      	str	r0, [r5, #16]
 80008d6:	b930      	cbnz	r0, 80008e6 <_svfiprintf_r+0x32>
 80008d8:	230c      	movs	r3, #12
 80008da:	603b      	str	r3, [r7, #0]
 80008dc:	f04f 30ff 	mov.w	r0, #4294967295
 80008e0:	b01d      	add	sp, #116	@ 0x74
 80008e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80008e6:	2340      	movs	r3, #64	@ 0x40
 80008e8:	616b      	str	r3, [r5, #20]
 80008ea:	2300      	movs	r3, #0
 80008ec:	9309      	str	r3, [sp, #36]	@ 0x24
 80008ee:	2320      	movs	r3, #32
 80008f0:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80008f4:	f8cd 800c 	str.w	r8, [sp, #12]
 80008f8:	2330      	movs	r3, #48	@ 0x30
 80008fa:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8000a98 <_svfiprintf_r+0x1e4>
 80008fe:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8000902:	f04f 0901 	mov.w	r9, #1
 8000906:	4623      	mov	r3, r4
 8000908:	469a      	mov	sl, r3
 800090a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800090e:	b10a      	cbz	r2, 8000914 <_svfiprintf_r+0x60>
 8000910:	2a25      	cmp	r2, #37	@ 0x25
 8000912:	d1f9      	bne.n	8000908 <_svfiprintf_r+0x54>
 8000914:	ebba 0b04 	subs.w	fp, sl, r4
 8000918:	d00b      	beq.n	8000932 <_svfiprintf_r+0x7e>
 800091a:	465b      	mov	r3, fp
 800091c:	4622      	mov	r2, r4
 800091e:	4629      	mov	r1, r5
 8000920:	4638      	mov	r0, r7
 8000922:	f7ff ff6b 	bl	80007fc <__ssputs_r>
 8000926:	3001      	adds	r0, #1
 8000928:	f000 80a7 	beq.w	8000a7a <_svfiprintf_r+0x1c6>
 800092c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800092e:	445a      	add	r2, fp
 8000930:	9209      	str	r2, [sp, #36]	@ 0x24
 8000932:	f89a 3000 	ldrb.w	r3, [sl]
 8000936:	2b00      	cmp	r3, #0
 8000938:	f000 809f 	beq.w	8000a7a <_svfiprintf_r+0x1c6>
 800093c:	2300      	movs	r3, #0
 800093e:	f04f 32ff 	mov.w	r2, #4294967295
 8000942:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8000946:	f10a 0a01 	add.w	sl, sl, #1
 800094a:	9304      	str	r3, [sp, #16]
 800094c:	9307      	str	r3, [sp, #28]
 800094e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8000952:	931a      	str	r3, [sp, #104]	@ 0x68
 8000954:	4654      	mov	r4, sl
 8000956:	2205      	movs	r2, #5
 8000958:	f814 1b01 	ldrb.w	r1, [r4], #1
 800095c:	484e      	ldr	r0, [pc, #312]	@ (8000a98 <_svfiprintf_r+0x1e4>)
 800095e:	f7ff fc3f 	bl	80001e0 <memchr>
 8000962:	9a04      	ldr	r2, [sp, #16]
 8000964:	b9d8      	cbnz	r0, 800099e <_svfiprintf_r+0xea>
 8000966:	06d0      	lsls	r0, r2, #27
 8000968:	bf44      	itt	mi
 800096a:	2320      	movmi	r3, #32
 800096c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8000970:	0711      	lsls	r1, r2, #28
 8000972:	bf44      	itt	mi
 8000974:	232b      	movmi	r3, #43	@ 0x2b
 8000976:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800097a:	f89a 3000 	ldrb.w	r3, [sl]
 800097e:	2b2a      	cmp	r3, #42	@ 0x2a
 8000980:	d015      	beq.n	80009ae <_svfiprintf_r+0xfa>
 8000982:	9a07      	ldr	r2, [sp, #28]
 8000984:	4654      	mov	r4, sl
 8000986:	2000      	movs	r0, #0
 8000988:	f04f 0c0a 	mov.w	ip, #10
 800098c:	4621      	mov	r1, r4
 800098e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000992:	3b30      	subs	r3, #48	@ 0x30
 8000994:	2b09      	cmp	r3, #9
 8000996:	d94b      	bls.n	8000a30 <_svfiprintf_r+0x17c>
 8000998:	b1b0      	cbz	r0, 80009c8 <_svfiprintf_r+0x114>
 800099a:	9207      	str	r2, [sp, #28]
 800099c:	e014      	b.n	80009c8 <_svfiprintf_r+0x114>
 800099e:	eba0 0308 	sub.w	r3, r0, r8
 80009a2:	fa09 f303 	lsl.w	r3, r9, r3
 80009a6:	4313      	orrs	r3, r2
 80009a8:	9304      	str	r3, [sp, #16]
 80009aa:	46a2      	mov	sl, r4
 80009ac:	e7d2      	b.n	8000954 <_svfiprintf_r+0xa0>
 80009ae:	9b03      	ldr	r3, [sp, #12]
 80009b0:	1d19      	adds	r1, r3, #4
 80009b2:	681b      	ldr	r3, [r3, #0]
 80009b4:	9103      	str	r1, [sp, #12]
 80009b6:	2b00      	cmp	r3, #0
 80009b8:	bfbb      	ittet	lt
 80009ba:	425b      	neglt	r3, r3
 80009bc:	f042 0202 	orrlt.w	r2, r2, #2
 80009c0:	9307      	strge	r3, [sp, #28]
 80009c2:	9307      	strlt	r3, [sp, #28]
 80009c4:	bfb8      	it	lt
 80009c6:	9204      	strlt	r2, [sp, #16]
 80009c8:	7823      	ldrb	r3, [r4, #0]
 80009ca:	2b2e      	cmp	r3, #46	@ 0x2e
 80009cc:	d10a      	bne.n	80009e4 <_svfiprintf_r+0x130>
 80009ce:	7863      	ldrb	r3, [r4, #1]
 80009d0:	2b2a      	cmp	r3, #42	@ 0x2a
 80009d2:	d132      	bne.n	8000a3a <_svfiprintf_r+0x186>
 80009d4:	9b03      	ldr	r3, [sp, #12]
 80009d6:	1d1a      	adds	r2, r3, #4
 80009d8:	681b      	ldr	r3, [r3, #0]
 80009da:	9203      	str	r2, [sp, #12]
 80009dc:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80009e0:	3402      	adds	r4, #2
 80009e2:	9305      	str	r3, [sp, #20]
 80009e4:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8000aa8 <_svfiprintf_r+0x1f4>
 80009e8:	7821      	ldrb	r1, [r4, #0]
 80009ea:	2203      	movs	r2, #3
 80009ec:	4650      	mov	r0, sl
 80009ee:	f7ff fbf7 	bl	80001e0 <memchr>
 80009f2:	b138      	cbz	r0, 8000a04 <_svfiprintf_r+0x150>
 80009f4:	9b04      	ldr	r3, [sp, #16]
 80009f6:	eba0 000a 	sub.w	r0, r0, sl
 80009fa:	2240      	movs	r2, #64	@ 0x40
 80009fc:	4082      	lsls	r2, r0
 80009fe:	4313      	orrs	r3, r2
 8000a00:	3401      	adds	r4, #1
 8000a02:	9304      	str	r3, [sp, #16]
 8000a04:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000a08:	4824      	ldr	r0, [pc, #144]	@ (8000a9c <_svfiprintf_r+0x1e8>)
 8000a0a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8000a0e:	2206      	movs	r2, #6
 8000a10:	f7ff fbe6 	bl	80001e0 <memchr>
 8000a14:	2800      	cmp	r0, #0
 8000a16:	d036      	beq.n	8000a86 <_svfiprintf_r+0x1d2>
 8000a18:	4b21      	ldr	r3, [pc, #132]	@ (8000aa0 <_svfiprintf_r+0x1ec>)
 8000a1a:	bb1b      	cbnz	r3, 8000a64 <_svfiprintf_r+0x1b0>
 8000a1c:	9b03      	ldr	r3, [sp, #12]
 8000a1e:	3307      	adds	r3, #7
 8000a20:	f023 0307 	bic.w	r3, r3, #7
 8000a24:	3308      	adds	r3, #8
 8000a26:	9303      	str	r3, [sp, #12]
 8000a28:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8000a2a:	4433      	add	r3, r6
 8000a2c:	9309      	str	r3, [sp, #36]	@ 0x24
 8000a2e:	e76a      	b.n	8000906 <_svfiprintf_r+0x52>
 8000a30:	fb0c 3202 	mla	r2, ip, r2, r3
 8000a34:	460c      	mov	r4, r1
 8000a36:	2001      	movs	r0, #1
 8000a38:	e7a8      	b.n	800098c <_svfiprintf_r+0xd8>
 8000a3a:	2300      	movs	r3, #0
 8000a3c:	3401      	adds	r4, #1
 8000a3e:	9305      	str	r3, [sp, #20]
 8000a40:	4619      	mov	r1, r3
 8000a42:	f04f 0c0a 	mov.w	ip, #10
 8000a46:	4620      	mov	r0, r4
 8000a48:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000a4c:	3a30      	subs	r2, #48	@ 0x30
 8000a4e:	2a09      	cmp	r2, #9
 8000a50:	d903      	bls.n	8000a5a <_svfiprintf_r+0x1a6>
 8000a52:	2b00      	cmp	r3, #0
 8000a54:	d0c6      	beq.n	80009e4 <_svfiprintf_r+0x130>
 8000a56:	9105      	str	r1, [sp, #20]
 8000a58:	e7c4      	b.n	80009e4 <_svfiprintf_r+0x130>
 8000a5a:	fb0c 2101 	mla	r1, ip, r1, r2
 8000a5e:	4604      	mov	r4, r0
 8000a60:	2301      	movs	r3, #1
 8000a62:	e7f0      	b.n	8000a46 <_svfiprintf_r+0x192>
 8000a64:	ab03      	add	r3, sp, #12
 8000a66:	9300      	str	r3, [sp, #0]
 8000a68:	462a      	mov	r2, r5
 8000a6a:	4b0e      	ldr	r3, [pc, #56]	@ (8000aa4 <_svfiprintf_r+0x1f0>)
 8000a6c:	a904      	add	r1, sp, #16
 8000a6e:	4638      	mov	r0, r7
 8000a70:	f3af 8000 	nop.w
 8000a74:	1c42      	adds	r2, r0, #1
 8000a76:	4606      	mov	r6, r0
 8000a78:	d1d6      	bne.n	8000a28 <_svfiprintf_r+0x174>
 8000a7a:	89ab      	ldrh	r3, [r5, #12]
 8000a7c:	065b      	lsls	r3, r3, #25
 8000a7e:	f53f af2d 	bmi.w	80008dc <_svfiprintf_r+0x28>
 8000a82:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8000a84:	e72c      	b.n	80008e0 <_svfiprintf_r+0x2c>
 8000a86:	ab03      	add	r3, sp, #12
 8000a88:	9300      	str	r3, [sp, #0]
 8000a8a:	462a      	mov	r2, r5
 8000a8c:	4b05      	ldr	r3, [pc, #20]	@ (8000aa4 <_svfiprintf_r+0x1f0>)
 8000a8e:	a904      	add	r1, sp, #16
 8000a90:	4638      	mov	r0, r7
 8000a92:	f000 f879 	bl	8000b88 <_printf_i>
 8000a96:	e7ed      	b.n	8000a74 <_svfiprintf_r+0x1c0>
 8000a98:	08000eef 	.word	0x08000eef
 8000a9c:	08000ef9 	.word	0x08000ef9
 8000aa0:	00000000 	.word	0x00000000
 8000aa4:	080007fd 	.word	0x080007fd
 8000aa8:	08000ef5 	.word	0x08000ef5

08000aac <_printf_common>:
 8000aac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ab0:	4616      	mov	r6, r2
 8000ab2:	4698      	mov	r8, r3
 8000ab4:	688a      	ldr	r2, [r1, #8]
 8000ab6:	690b      	ldr	r3, [r1, #16]
 8000ab8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8000abc:	4293      	cmp	r3, r2
 8000abe:	bfb8      	it	lt
 8000ac0:	4613      	movlt	r3, r2
 8000ac2:	6033      	str	r3, [r6, #0]
 8000ac4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8000ac8:	4607      	mov	r7, r0
 8000aca:	460c      	mov	r4, r1
 8000acc:	b10a      	cbz	r2, 8000ad2 <_printf_common+0x26>
 8000ace:	3301      	adds	r3, #1
 8000ad0:	6033      	str	r3, [r6, #0]
 8000ad2:	6823      	ldr	r3, [r4, #0]
 8000ad4:	0699      	lsls	r1, r3, #26
 8000ad6:	bf42      	ittt	mi
 8000ad8:	6833      	ldrmi	r3, [r6, #0]
 8000ada:	3302      	addmi	r3, #2
 8000adc:	6033      	strmi	r3, [r6, #0]
 8000ade:	6825      	ldr	r5, [r4, #0]
 8000ae0:	f015 0506 	ands.w	r5, r5, #6
 8000ae4:	d106      	bne.n	8000af4 <_printf_common+0x48>
 8000ae6:	f104 0a19 	add.w	sl, r4, #25
 8000aea:	68e3      	ldr	r3, [r4, #12]
 8000aec:	6832      	ldr	r2, [r6, #0]
 8000aee:	1a9b      	subs	r3, r3, r2
 8000af0:	42ab      	cmp	r3, r5
 8000af2:	dc26      	bgt.n	8000b42 <_printf_common+0x96>
 8000af4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8000af8:	6822      	ldr	r2, [r4, #0]
 8000afa:	3b00      	subs	r3, #0
 8000afc:	bf18      	it	ne
 8000afe:	2301      	movne	r3, #1
 8000b00:	0692      	lsls	r2, r2, #26
 8000b02:	d42b      	bmi.n	8000b5c <_printf_common+0xb0>
 8000b04:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8000b08:	4641      	mov	r1, r8
 8000b0a:	4638      	mov	r0, r7
 8000b0c:	47c8      	blx	r9
 8000b0e:	3001      	adds	r0, #1
 8000b10:	d01e      	beq.n	8000b50 <_printf_common+0xa4>
 8000b12:	6823      	ldr	r3, [r4, #0]
 8000b14:	6922      	ldr	r2, [r4, #16]
 8000b16:	f003 0306 	and.w	r3, r3, #6
 8000b1a:	2b04      	cmp	r3, #4
 8000b1c:	bf02      	ittt	eq
 8000b1e:	68e5      	ldreq	r5, [r4, #12]
 8000b20:	6833      	ldreq	r3, [r6, #0]
 8000b22:	1aed      	subeq	r5, r5, r3
 8000b24:	68a3      	ldr	r3, [r4, #8]
 8000b26:	bf0c      	ite	eq
 8000b28:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8000b2c:	2500      	movne	r5, #0
 8000b2e:	4293      	cmp	r3, r2
 8000b30:	bfc4      	itt	gt
 8000b32:	1a9b      	subgt	r3, r3, r2
 8000b34:	18ed      	addgt	r5, r5, r3
 8000b36:	2600      	movs	r6, #0
 8000b38:	341a      	adds	r4, #26
 8000b3a:	42b5      	cmp	r5, r6
 8000b3c:	d11a      	bne.n	8000b74 <_printf_common+0xc8>
 8000b3e:	2000      	movs	r0, #0
 8000b40:	e008      	b.n	8000b54 <_printf_common+0xa8>
 8000b42:	2301      	movs	r3, #1
 8000b44:	4652      	mov	r2, sl
 8000b46:	4641      	mov	r1, r8
 8000b48:	4638      	mov	r0, r7
 8000b4a:	47c8      	blx	r9
 8000b4c:	3001      	adds	r0, #1
 8000b4e:	d103      	bne.n	8000b58 <_printf_common+0xac>
 8000b50:	f04f 30ff 	mov.w	r0, #4294967295
 8000b54:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b58:	3501      	adds	r5, #1
 8000b5a:	e7c6      	b.n	8000aea <_printf_common+0x3e>
 8000b5c:	18e1      	adds	r1, r4, r3
 8000b5e:	1c5a      	adds	r2, r3, #1
 8000b60:	2030      	movs	r0, #48	@ 0x30
 8000b62:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8000b66:	4422      	add	r2, r4
 8000b68:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8000b6c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8000b70:	3302      	adds	r3, #2
 8000b72:	e7c7      	b.n	8000b04 <_printf_common+0x58>
 8000b74:	2301      	movs	r3, #1
 8000b76:	4622      	mov	r2, r4
 8000b78:	4641      	mov	r1, r8
 8000b7a:	4638      	mov	r0, r7
 8000b7c:	47c8      	blx	r9
 8000b7e:	3001      	adds	r0, #1
 8000b80:	d0e6      	beq.n	8000b50 <_printf_common+0xa4>
 8000b82:	3601      	adds	r6, #1
 8000b84:	e7d9      	b.n	8000b3a <_printf_common+0x8e>
	...

08000b88 <_printf_i>:
 8000b88:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8000b8c:	7e0f      	ldrb	r7, [r1, #24]
 8000b8e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8000b90:	2f78      	cmp	r7, #120	@ 0x78
 8000b92:	4691      	mov	r9, r2
 8000b94:	4680      	mov	r8, r0
 8000b96:	460c      	mov	r4, r1
 8000b98:	469a      	mov	sl, r3
 8000b9a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8000b9e:	d807      	bhi.n	8000bb0 <_printf_i+0x28>
 8000ba0:	2f62      	cmp	r7, #98	@ 0x62
 8000ba2:	d80a      	bhi.n	8000bba <_printf_i+0x32>
 8000ba4:	2f00      	cmp	r7, #0
 8000ba6:	f000 80d2 	beq.w	8000d4e <_printf_i+0x1c6>
 8000baa:	2f58      	cmp	r7, #88	@ 0x58
 8000bac:	f000 80b9 	beq.w	8000d22 <_printf_i+0x19a>
 8000bb0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8000bb4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8000bb8:	e03a      	b.n	8000c30 <_printf_i+0xa8>
 8000bba:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8000bbe:	2b15      	cmp	r3, #21
 8000bc0:	d8f6      	bhi.n	8000bb0 <_printf_i+0x28>
 8000bc2:	a101      	add	r1, pc, #4	@ (adr r1, 8000bc8 <_printf_i+0x40>)
 8000bc4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8000bc8:	08000c21 	.word	0x08000c21
 8000bcc:	08000c35 	.word	0x08000c35
 8000bd0:	08000bb1 	.word	0x08000bb1
 8000bd4:	08000bb1 	.word	0x08000bb1
 8000bd8:	08000bb1 	.word	0x08000bb1
 8000bdc:	08000bb1 	.word	0x08000bb1
 8000be0:	08000c35 	.word	0x08000c35
 8000be4:	08000bb1 	.word	0x08000bb1
 8000be8:	08000bb1 	.word	0x08000bb1
 8000bec:	08000bb1 	.word	0x08000bb1
 8000bf0:	08000bb1 	.word	0x08000bb1
 8000bf4:	08000d35 	.word	0x08000d35
 8000bf8:	08000c5f 	.word	0x08000c5f
 8000bfc:	08000cef 	.word	0x08000cef
 8000c00:	08000bb1 	.word	0x08000bb1
 8000c04:	08000bb1 	.word	0x08000bb1
 8000c08:	08000d57 	.word	0x08000d57
 8000c0c:	08000bb1 	.word	0x08000bb1
 8000c10:	08000c5f 	.word	0x08000c5f
 8000c14:	08000bb1 	.word	0x08000bb1
 8000c18:	08000bb1 	.word	0x08000bb1
 8000c1c:	08000cf7 	.word	0x08000cf7
 8000c20:	6833      	ldr	r3, [r6, #0]
 8000c22:	1d1a      	adds	r2, r3, #4
 8000c24:	681b      	ldr	r3, [r3, #0]
 8000c26:	6032      	str	r2, [r6, #0]
 8000c28:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8000c2c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8000c30:	2301      	movs	r3, #1
 8000c32:	e09d      	b.n	8000d70 <_printf_i+0x1e8>
 8000c34:	6833      	ldr	r3, [r6, #0]
 8000c36:	6820      	ldr	r0, [r4, #0]
 8000c38:	1d19      	adds	r1, r3, #4
 8000c3a:	6031      	str	r1, [r6, #0]
 8000c3c:	0606      	lsls	r6, r0, #24
 8000c3e:	d501      	bpl.n	8000c44 <_printf_i+0xbc>
 8000c40:	681d      	ldr	r5, [r3, #0]
 8000c42:	e003      	b.n	8000c4c <_printf_i+0xc4>
 8000c44:	0645      	lsls	r5, r0, #25
 8000c46:	d5fb      	bpl.n	8000c40 <_printf_i+0xb8>
 8000c48:	f9b3 5000 	ldrsh.w	r5, [r3]
 8000c4c:	2d00      	cmp	r5, #0
 8000c4e:	da03      	bge.n	8000c58 <_printf_i+0xd0>
 8000c50:	232d      	movs	r3, #45	@ 0x2d
 8000c52:	426d      	negs	r5, r5
 8000c54:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8000c58:	4859      	ldr	r0, [pc, #356]	@ (8000dc0 <_printf_i+0x238>)
 8000c5a:	230a      	movs	r3, #10
 8000c5c:	e011      	b.n	8000c82 <_printf_i+0xfa>
 8000c5e:	6821      	ldr	r1, [r4, #0]
 8000c60:	6833      	ldr	r3, [r6, #0]
 8000c62:	0608      	lsls	r0, r1, #24
 8000c64:	f853 5b04 	ldr.w	r5, [r3], #4
 8000c68:	d402      	bmi.n	8000c70 <_printf_i+0xe8>
 8000c6a:	0649      	lsls	r1, r1, #25
 8000c6c:	bf48      	it	mi
 8000c6e:	b2ad      	uxthmi	r5, r5
 8000c70:	2f6f      	cmp	r7, #111	@ 0x6f
 8000c72:	4853      	ldr	r0, [pc, #332]	@ (8000dc0 <_printf_i+0x238>)
 8000c74:	6033      	str	r3, [r6, #0]
 8000c76:	bf14      	ite	ne
 8000c78:	230a      	movne	r3, #10
 8000c7a:	2308      	moveq	r3, #8
 8000c7c:	2100      	movs	r1, #0
 8000c7e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8000c82:	6866      	ldr	r6, [r4, #4]
 8000c84:	60a6      	str	r6, [r4, #8]
 8000c86:	2e00      	cmp	r6, #0
 8000c88:	bfa2      	ittt	ge
 8000c8a:	6821      	ldrge	r1, [r4, #0]
 8000c8c:	f021 0104 	bicge.w	r1, r1, #4
 8000c90:	6021      	strge	r1, [r4, #0]
 8000c92:	b90d      	cbnz	r5, 8000c98 <_printf_i+0x110>
 8000c94:	2e00      	cmp	r6, #0
 8000c96:	d04b      	beq.n	8000d30 <_printf_i+0x1a8>
 8000c98:	4616      	mov	r6, r2
 8000c9a:	fbb5 f1f3 	udiv	r1, r5, r3
 8000c9e:	fb03 5711 	mls	r7, r3, r1, r5
 8000ca2:	5dc7      	ldrb	r7, [r0, r7]
 8000ca4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8000ca8:	462f      	mov	r7, r5
 8000caa:	42bb      	cmp	r3, r7
 8000cac:	460d      	mov	r5, r1
 8000cae:	d9f4      	bls.n	8000c9a <_printf_i+0x112>
 8000cb0:	2b08      	cmp	r3, #8
 8000cb2:	d10b      	bne.n	8000ccc <_printf_i+0x144>
 8000cb4:	6823      	ldr	r3, [r4, #0]
 8000cb6:	07df      	lsls	r7, r3, #31
 8000cb8:	d508      	bpl.n	8000ccc <_printf_i+0x144>
 8000cba:	6923      	ldr	r3, [r4, #16]
 8000cbc:	6861      	ldr	r1, [r4, #4]
 8000cbe:	4299      	cmp	r1, r3
 8000cc0:	bfde      	ittt	le
 8000cc2:	2330      	movle	r3, #48	@ 0x30
 8000cc4:	f806 3c01 	strble.w	r3, [r6, #-1]
 8000cc8:	f106 36ff 	addle.w	r6, r6, #4294967295
 8000ccc:	1b92      	subs	r2, r2, r6
 8000cce:	6122      	str	r2, [r4, #16]
 8000cd0:	f8cd a000 	str.w	sl, [sp]
 8000cd4:	464b      	mov	r3, r9
 8000cd6:	aa03      	add	r2, sp, #12
 8000cd8:	4621      	mov	r1, r4
 8000cda:	4640      	mov	r0, r8
 8000cdc:	f7ff fee6 	bl	8000aac <_printf_common>
 8000ce0:	3001      	adds	r0, #1
 8000ce2:	d14a      	bne.n	8000d7a <_printf_i+0x1f2>
 8000ce4:	f04f 30ff 	mov.w	r0, #4294967295
 8000ce8:	b004      	add	sp, #16
 8000cea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cee:	6823      	ldr	r3, [r4, #0]
 8000cf0:	f043 0320 	orr.w	r3, r3, #32
 8000cf4:	6023      	str	r3, [r4, #0]
 8000cf6:	4833      	ldr	r0, [pc, #204]	@ (8000dc4 <_printf_i+0x23c>)
 8000cf8:	2778      	movs	r7, #120	@ 0x78
 8000cfa:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8000cfe:	6823      	ldr	r3, [r4, #0]
 8000d00:	6831      	ldr	r1, [r6, #0]
 8000d02:	061f      	lsls	r7, r3, #24
 8000d04:	f851 5b04 	ldr.w	r5, [r1], #4
 8000d08:	d402      	bmi.n	8000d10 <_printf_i+0x188>
 8000d0a:	065f      	lsls	r7, r3, #25
 8000d0c:	bf48      	it	mi
 8000d0e:	b2ad      	uxthmi	r5, r5
 8000d10:	6031      	str	r1, [r6, #0]
 8000d12:	07d9      	lsls	r1, r3, #31
 8000d14:	bf44      	itt	mi
 8000d16:	f043 0320 	orrmi.w	r3, r3, #32
 8000d1a:	6023      	strmi	r3, [r4, #0]
 8000d1c:	b11d      	cbz	r5, 8000d26 <_printf_i+0x19e>
 8000d1e:	2310      	movs	r3, #16
 8000d20:	e7ac      	b.n	8000c7c <_printf_i+0xf4>
 8000d22:	4827      	ldr	r0, [pc, #156]	@ (8000dc0 <_printf_i+0x238>)
 8000d24:	e7e9      	b.n	8000cfa <_printf_i+0x172>
 8000d26:	6823      	ldr	r3, [r4, #0]
 8000d28:	f023 0320 	bic.w	r3, r3, #32
 8000d2c:	6023      	str	r3, [r4, #0]
 8000d2e:	e7f6      	b.n	8000d1e <_printf_i+0x196>
 8000d30:	4616      	mov	r6, r2
 8000d32:	e7bd      	b.n	8000cb0 <_printf_i+0x128>
 8000d34:	6833      	ldr	r3, [r6, #0]
 8000d36:	6825      	ldr	r5, [r4, #0]
 8000d38:	6961      	ldr	r1, [r4, #20]
 8000d3a:	1d18      	adds	r0, r3, #4
 8000d3c:	6030      	str	r0, [r6, #0]
 8000d3e:	062e      	lsls	r6, r5, #24
 8000d40:	681b      	ldr	r3, [r3, #0]
 8000d42:	d501      	bpl.n	8000d48 <_printf_i+0x1c0>
 8000d44:	6019      	str	r1, [r3, #0]
 8000d46:	e002      	b.n	8000d4e <_printf_i+0x1c6>
 8000d48:	0668      	lsls	r0, r5, #25
 8000d4a:	d5fb      	bpl.n	8000d44 <_printf_i+0x1bc>
 8000d4c:	8019      	strh	r1, [r3, #0]
 8000d4e:	2300      	movs	r3, #0
 8000d50:	6123      	str	r3, [r4, #16]
 8000d52:	4616      	mov	r6, r2
 8000d54:	e7bc      	b.n	8000cd0 <_printf_i+0x148>
 8000d56:	6833      	ldr	r3, [r6, #0]
 8000d58:	1d1a      	adds	r2, r3, #4
 8000d5a:	6032      	str	r2, [r6, #0]
 8000d5c:	681e      	ldr	r6, [r3, #0]
 8000d5e:	6862      	ldr	r2, [r4, #4]
 8000d60:	2100      	movs	r1, #0
 8000d62:	4630      	mov	r0, r6
 8000d64:	f7ff fa3c 	bl	80001e0 <memchr>
 8000d68:	b108      	cbz	r0, 8000d6e <_printf_i+0x1e6>
 8000d6a:	1b80      	subs	r0, r0, r6
 8000d6c:	6060      	str	r0, [r4, #4]
 8000d6e:	6863      	ldr	r3, [r4, #4]
 8000d70:	6123      	str	r3, [r4, #16]
 8000d72:	2300      	movs	r3, #0
 8000d74:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8000d78:	e7aa      	b.n	8000cd0 <_printf_i+0x148>
 8000d7a:	6923      	ldr	r3, [r4, #16]
 8000d7c:	4632      	mov	r2, r6
 8000d7e:	4649      	mov	r1, r9
 8000d80:	4640      	mov	r0, r8
 8000d82:	47d0      	blx	sl
 8000d84:	3001      	adds	r0, #1
 8000d86:	d0ad      	beq.n	8000ce4 <_printf_i+0x15c>
 8000d88:	6823      	ldr	r3, [r4, #0]
 8000d8a:	079b      	lsls	r3, r3, #30
 8000d8c:	d413      	bmi.n	8000db6 <_printf_i+0x22e>
 8000d8e:	68e0      	ldr	r0, [r4, #12]
 8000d90:	9b03      	ldr	r3, [sp, #12]
 8000d92:	4298      	cmp	r0, r3
 8000d94:	bfb8      	it	lt
 8000d96:	4618      	movlt	r0, r3
 8000d98:	e7a6      	b.n	8000ce8 <_printf_i+0x160>
 8000d9a:	2301      	movs	r3, #1
 8000d9c:	4632      	mov	r2, r6
 8000d9e:	4649      	mov	r1, r9
 8000da0:	4640      	mov	r0, r8
 8000da2:	47d0      	blx	sl
 8000da4:	3001      	adds	r0, #1
 8000da6:	d09d      	beq.n	8000ce4 <_printf_i+0x15c>
 8000da8:	3501      	adds	r5, #1
 8000daa:	68e3      	ldr	r3, [r4, #12]
 8000dac:	9903      	ldr	r1, [sp, #12]
 8000dae:	1a5b      	subs	r3, r3, r1
 8000db0:	42ab      	cmp	r3, r5
 8000db2:	dcf2      	bgt.n	8000d9a <_printf_i+0x212>
 8000db4:	e7eb      	b.n	8000d8e <_printf_i+0x206>
 8000db6:	2500      	movs	r5, #0
 8000db8:	f104 0619 	add.w	r6, r4, #25
 8000dbc:	e7f5      	b.n	8000daa <_printf_i+0x222>
 8000dbe:	bf00      	nop
 8000dc0:	08000f00 	.word	0x08000f00
 8000dc4:	08000f11 	.word	0x08000f11

08000dc8 <memmove>:
 8000dc8:	4288      	cmp	r0, r1
 8000dca:	b510      	push	{r4, lr}
 8000dcc:	eb01 0402 	add.w	r4, r1, r2
 8000dd0:	d902      	bls.n	8000dd8 <memmove+0x10>
 8000dd2:	4284      	cmp	r4, r0
 8000dd4:	4623      	mov	r3, r4
 8000dd6:	d807      	bhi.n	8000de8 <memmove+0x20>
 8000dd8:	1e43      	subs	r3, r0, #1
 8000dda:	42a1      	cmp	r1, r4
 8000ddc:	d008      	beq.n	8000df0 <memmove+0x28>
 8000dde:	f811 2b01 	ldrb.w	r2, [r1], #1
 8000de2:	f803 2f01 	strb.w	r2, [r3, #1]!
 8000de6:	e7f8      	b.n	8000dda <memmove+0x12>
 8000de8:	4402      	add	r2, r0
 8000dea:	4601      	mov	r1, r0
 8000dec:	428a      	cmp	r2, r1
 8000dee:	d100      	bne.n	8000df2 <memmove+0x2a>
 8000df0:	bd10      	pop	{r4, pc}
 8000df2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8000df6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8000dfa:	e7f7      	b.n	8000dec <memmove+0x24>

08000dfc <_sbrk_r>:
 8000dfc:	b538      	push	{r3, r4, r5, lr}
 8000dfe:	4d06      	ldr	r5, [pc, #24]	@ (8000e18 <_sbrk_r+0x1c>)
 8000e00:	2300      	movs	r3, #0
 8000e02:	4604      	mov	r4, r0
 8000e04:	4608      	mov	r0, r1
 8000e06:	602b      	str	r3, [r5, #0]
 8000e08:	f7ff face 	bl	80003a8 <_sbrk>
 8000e0c:	1c43      	adds	r3, r0, #1
 8000e0e:	d102      	bne.n	8000e16 <_sbrk_r+0x1a>
 8000e10:	682b      	ldr	r3, [r5, #0]
 8000e12:	b103      	cbz	r3, 8000e16 <_sbrk_r+0x1a>
 8000e14:	6023      	str	r3, [r4, #0]
 8000e16:	bd38      	pop	{r3, r4, r5, pc}
 8000e18:	200001ac 	.word	0x200001ac

08000e1c <memcpy>:
 8000e1c:	440a      	add	r2, r1
 8000e1e:	4291      	cmp	r1, r2
 8000e20:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e24:	d100      	bne.n	8000e28 <memcpy+0xc>
 8000e26:	4770      	bx	lr
 8000e28:	b510      	push	{r4, lr}
 8000e2a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8000e2e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8000e32:	4291      	cmp	r1, r2
 8000e34:	d1f9      	bne.n	8000e2a <memcpy+0xe>
 8000e36:	bd10      	pop	{r4, pc}

08000e38 <_realloc_r>:
 8000e38:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000e3c:	4680      	mov	r8, r0
 8000e3e:	4615      	mov	r5, r2
 8000e40:	460c      	mov	r4, r1
 8000e42:	b921      	cbnz	r1, 8000e4e <_realloc_r+0x16>
 8000e44:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8000e48:	4611      	mov	r1, r2
 8000e4a:	f7ff bc4b 	b.w	80006e4 <_malloc_r>
 8000e4e:	b92a      	cbnz	r2, 8000e5c <_realloc_r+0x24>
 8000e50:	f7ff fbdc 	bl	800060c <_free_r>
 8000e54:	2400      	movs	r4, #0
 8000e56:	4620      	mov	r0, r4
 8000e58:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000e5c:	f000 f81a 	bl	8000e94 <_malloc_usable_size_r>
 8000e60:	4285      	cmp	r5, r0
 8000e62:	4606      	mov	r6, r0
 8000e64:	d802      	bhi.n	8000e6c <_realloc_r+0x34>
 8000e66:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8000e6a:	d8f4      	bhi.n	8000e56 <_realloc_r+0x1e>
 8000e6c:	4629      	mov	r1, r5
 8000e6e:	4640      	mov	r0, r8
 8000e70:	f7ff fc38 	bl	80006e4 <_malloc_r>
 8000e74:	4607      	mov	r7, r0
 8000e76:	2800      	cmp	r0, #0
 8000e78:	d0ec      	beq.n	8000e54 <_realloc_r+0x1c>
 8000e7a:	42b5      	cmp	r5, r6
 8000e7c:	462a      	mov	r2, r5
 8000e7e:	4621      	mov	r1, r4
 8000e80:	bf28      	it	cs
 8000e82:	4632      	movcs	r2, r6
 8000e84:	f7ff ffca 	bl	8000e1c <memcpy>
 8000e88:	4621      	mov	r1, r4
 8000e8a:	4640      	mov	r0, r8
 8000e8c:	f7ff fbbe 	bl	800060c <_free_r>
 8000e90:	463c      	mov	r4, r7
 8000e92:	e7e0      	b.n	8000e56 <_realloc_r+0x1e>

08000e94 <_malloc_usable_size_r>:
 8000e94:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8000e98:	1f18      	subs	r0, r3, #4
 8000e9a:	2b00      	cmp	r3, #0
 8000e9c:	bfbc      	itt	lt
 8000e9e:	580b      	ldrlt	r3, [r1, r0]
 8000ea0:	18c0      	addlt	r0, r0, r3
 8000ea2:	4770      	bx	lr

08000ea4 <_init>:
 8000ea4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000ea6:	bf00      	nop
 8000ea8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000eaa:	bc08      	pop	{r3}
 8000eac:	469e      	mov	lr, r3
 8000eae:	4770      	bx	lr

08000eb0 <_fini>:
 8000eb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000eb2:	bf00      	nop
 8000eb4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000eb6:	bc08      	pop	{r3}
 8000eb8:	469e      	mov	lr, r3
 8000eba:	4770      	bx	lr
