
5_UART_TX.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000244  08000198  08000198  00001198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080003dc  080003e4  000013e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  080003dc  080003dc  000013e4  2**0
                  CONTENTS
  4 .ARM          00000000  080003dc  080003dc  000013e4  2**0
                  CONTENTS
  5 .preinit_array 00000000  080003dc  080003e4  000013e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080003dc  080003dc  000013dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080003e0  080003e0  000013e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000000  20000000  20000000  000013e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000000  080003e4  00002000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000001c  080003e4  0000201c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000013e4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00000475  00000000  00000000  00001414  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000171  00000000  00000000  00001889  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000070  00000000  00000000  00001a00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000004b  00000000  00000000  00001a70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000dc8a  00000000  00000000  00001abb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000006bc  00000000  00000000  0000f745  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0004fea4  00000000  00000000  0000fe01  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0005fca5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000110  00000000  00000000  0005fce8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005c  00000000  00000000  0005fdf8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	@ (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	@ (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000000 	.word	0x20000000
 80001b4:	00000000 	.word	0x00000000
 80001b8:	080003c4 	.word	0x080003c4

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	@ (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	@ (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	@ (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000004 	.word	0x20000004
 80001d4:	080003c4 	.word	0x080003c4

080001d8 <main>:
void uart2_write(int ch);
void delay(volatile int time);


int main(void)
{
 80001d8:	b580      	push	{r7, lr}
 80001da:	af00      	add	r7, sp, #0
	uar2_tx_init();
 80001dc:	f000 f822 	bl	8000224 <uar2_tx_init>

	while(1)
	{
		uart2_write('Y');
 80001e0:	2059      	movs	r0, #89	@ 0x59
 80001e2:	f000 f807 	bl	80001f4 <uart2_write>
        delay(100000);  // Add a delay to slow down transmission
 80001e6:	4802      	ldr	r0, [pc, #8]	@ (80001f0 <main+0x18>)
 80001e8:	f000 f88d 	bl	8000306 <delay>
		uart2_write('Y');
 80001ec:	bf00      	nop
 80001ee:	e7f7      	b.n	80001e0 <main+0x8>
 80001f0:	000186a0 	.word	0x000186a0

080001f4 <uart2_write>:
	}
}


void uart2_write(int ch)
{
 80001f4:	b480      	push	{r7}
 80001f6:	b083      	sub	sp, #12
 80001f8:	af00      	add	r7, sp, #0
 80001fa:	6078      	str	r0, [r7, #4]
	/*Make sure that transmitting data register is empty*/

	while(!(USART2->SR & SR_TXE)){}
 80001fc:	bf00      	nop
 80001fe:	4b08      	ldr	r3, [pc, #32]	@ (8000220 <uart2_write+0x2c>)
 8000200:	681b      	ldr	r3, [r3, #0]
 8000202:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000206:	2b00      	cmp	r3, #0
 8000208:	d0f9      	beq.n	80001fe <uart2_write+0xa>

	/*Write to transmit data register*/
	USART2->DR = (ch & 0xFF);
 800020a:	687b      	ldr	r3, [r7, #4]
 800020c:	4a04      	ldr	r2, [pc, #16]	@ (8000220 <uart2_write+0x2c>)
 800020e:	b2db      	uxtb	r3, r3
 8000210:	6053      	str	r3, [r2, #4]
}
 8000212:	bf00      	nop
 8000214:	370c      	adds	r7, #12
 8000216:	46bd      	mov	sp, r7
 8000218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800021c:	4770      	bx	lr
 800021e:	bf00      	nop
 8000220:	40004400 	.word	0x40004400

08000224 <uar2_tx_init>:


void uar2_tx_init(void)
{
 8000224:	b580      	push	{r7, lr}
 8000226:	af00      	add	r7, sp, #0
	/******Configuring the UART GPIO PIN******/
	/*Enable Clock access to GPIOA*/
	RCC->AHB1ENR |= GPIOAEN;
 8000228:	4b20      	ldr	r3, [pc, #128]	@ (80002ac <uar2_tx_init+0x88>)
 800022a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800022c:	4a1f      	ldr	r2, [pc, #124]	@ (80002ac <uar2_tx_init+0x88>)
 800022e:	f043 0301 	orr.w	r3, r3, #1
 8000232:	6313      	str	r3, [r2, #48]	@ 0x30


	/*Set PA2 as mode to alternate function mode*/
	GPIOA->MODER &=~(1U<<4);
 8000234:	4b1e      	ldr	r3, [pc, #120]	@ (80002b0 <uar2_tx_init+0x8c>)
 8000236:	681b      	ldr	r3, [r3, #0]
 8000238:	4a1d      	ldr	r2, [pc, #116]	@ (80002b0 <uar2_tx_init+0x8c>)
 800023a:	f023 0310 	bic.w	r3, r3, #16
 800023e:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |=(1<<5);
 8000240:	4b1b      	ldr	r3, [pc, #108]	@ (80002b0 <uar2_tx_init+0x8c>)
 8000242:	681b      	ldr	r3, [r3, #0]
 8000244:	4a1a      	ldr	r2, [pc, #104]	@ (80002b0 <uar2_tx_init+0x8c>)
 8000246:	f043 0320 	orr.w	r3, r3, #32
 800024a:	6013      	str	r3, [r2, #0]


	/*Set PA2 alternate function type to UART_TX (AF07)*/
	GPIOA->AFR[0] |= (1U<<8);
 800024c:	4b18      	ldr	r3, [pc, #96]	@ (80002b0 <uar2_tx_init+0x8c>)
 800024e:	6a1b      	ldr	r3, [r3, #32]
 8000250:	4a17      	ldr	r2, [pc, #92]	@ (80002b0 <uar2_tx_init+0x8c>)
 8000252:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000256:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] |= (1U<<9);
 8000258:	4b15      	ldr	r3, [pc, #84]	@ (80002b0 <uar2_tx_init+0x8c>)
 800025a:	6a1b      	ldr	r3, [r3, #32]
 800025c:	4a14      	ldr	r2, [pc, #80]	@ (80002b0 <uar2_tx_init+0x8c>)
 800025e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000262:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] |= (1U<<10);
 8000264:	4b12      	ldr	r3, [pc, #72]	@ (80002b0 <uar2_tx_init+0x8c>)
 8000266:	6a1b      	ldr	r3, [r3, #32]
 8000268:	4a11      	ldr	r2, [pc, #68]	@ (80002b0 <uar2_tx_init+0x8c>)
 800026a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800026e:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] &= ~(1U<<11);
 8000270:	4b0f      	ldr	r3, [pc, #60]	@ (80002b0 <uar2_tx_init+0x8c>)
 8000272:	6a1b      	ldr	r3, [r3, #32]
 8000274:	4a0e      	ldr	r2, [pc, #56]	@ (80002b0 <uar2_tx_init+0x8c>)
 8000276:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800027a:	6213      	str	r3, [r2, #32]


	/******configur uart module******/
	/*Enable clock access to uart2*/
	RCC->APB1ENR |= UART2EN;
 800027c:	4b0b      	ldr	r3, [pc, #44]	@ (80002ac <uar2_tx_init+0x88>)
 800027e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000280:	4a0a      	ldr	r2, [pc, #40]	@ (80002ac <uar2_tx_init+0x88>)
 8000282:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000286:	6413      	str	r3, [r2, #64]	@ 0x40


	/*Configure baudrate*/
	Uart_set_baudrate(USART2, APB1_CLK, UART_BAUDRATE);
 8000288:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800028c:	4909      	ldr	r1, [pc, #36]	@ (80002b4 <uar2_tx_init+0x90>)
 800028e:	480a      	ldr	r0, [pc, #40]	@ (80002b8 <uar2_tx_init+0x94>)
 8000290:	f000 f814 	bl	80002bc <Uart_set_baudrate>

	/*configuring the transfer direction*/
	USART2->CR1 =  CR1_TE	;
 8000294:	4b08      	ldr	r3, [pc, #32]	@ (80002b8 <uar2_tx_init+0x94>)
 8000296:	2208      	movs	r2, #8
 8000298:	60da      	str	r2, [r3, #12]

	/*enable uart module*/
	USART2->CR1 |= CR1_UE;
 800029a:	4b07      	ldr	r3, [pc, #28]	@ (80002b8 <uar2_tx_init+0x94>)
 800029c:	68db      	ldr	r3, [r3, #12]
 800029e:	4a06      	ldr	r2, [pc, #24]	@ (80002b8 <uar2_tx_init+0x94>)
 80002a0:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80002a4:	60d3      	str	r3, [r2, #12]

}
 80002a6:	bf00      	nop
 80002a8:	bd80      	pop	{r7, pc}
 80002aa:	bf00      	nop
 80002ac:	40023800 	.word	0x40023800
 80002b0:	40020000 	.word	0x40020000
 80002b4:	00f42400 	.word	0x00f42400
 80002b8:	40004400 	.word	0x40004400

080002bc <Uart_set_baudrate>:


static void Uart_set_baudrate(USART_TypeDef *USARTX, uint32_t Periphclk, uint32_t BaudRate)
{
 80002bc:	b580      	push	{r7, lr}
 80002be:	b084      	sub	sp, #16
 80002c0:	af00      	add	r7, sp, #0
 80002c2:	60f8      	str	r0, [r7, #12]
 80002c4:	60b9      	str	r1, [r7, #8]
 80002c6:	607a      	str	r2, [r7, #4]
	USARTX->BRR = compute_uart_bd(Periphclk, BaudRate);
 80002c8:	6879      	ldr	r1, [r7, #4]
 80002ca:	68b8      	ldr	r0, [r7, #8]
 80002cc:	f000 f808 	bl	80002e0 <compute_uart_bd>
 80002d0:	4603      	mov	r3, r0
 80002d2:	461a      	mov	r2, r3
 80002d4:	68fb      	ldr	r3, [r7, #12]
 80002d6:	609a      	str	r2, [r3, #8]
}
 80002d8:	bf00      	nop
 80002da:	3710      	adds	r7, #16
 80002dc:	46bd      	mov	sp, r7
 80002de:	bd80      	pop	{r7, pc}

080002e0 <compute_uart_bd>:

static uint16_t  compute_uart_bd(uint32_t Periphclk, uint32_t BaudRate)
{
 80002e0:	b480      	push	{r7}
 80002e2:	b083      	sub	sp, #12
 80002e4:	af00      	add	r7, sp, #0
 80002e6:	6078      	str	r0, [r7, #4]
 80002e8:	6039      	str	r1, [r7, #0]
	return ((Periphclk + (BaudRate/2U))/ BaudRate);
 80002ea:	683b      	ldr	r3, [r7, #0]
 80002ec:	085a      	lsrs	r2, r3, #1
 80002ee:	687b      	ldr	r3, [r7, #4]
 80002f0:	441a      	add	r2, r3
 80002f2:	683b      	ldr	r3, [r7, #0]
 80002f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80002f8:	b29b      	uxth	r3, r3
}
 80002fa:	4618      	mov	r0, r3
 80002fc:	370c      	adds	r7, #12
 80002fe:	46bd      	mov	sp, r7
 8000300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000304:	4770      	bx	lr

08000306 <delay>:

void delay(volatile int time)
{
 8000306:	b480      	push	{r7}
 8000308:	b083      	sub	sp, #12
 800030a:	af00      	add	r7, sp, #0
 800030c:	6078      	str	r0, [r7, #4]
    while(time--);
 800030e:	bf00      	nop
 8000310:	687b      	ldr	r3, [r7, #4]
 8000312:	1e5a      	subs	r2, r3, #1
 8000314:	607a      	str	r2, [r7, #4]
 8000316:	2b00      	cmp	r3, #0
 8000318:	d1fa      	bne.n	8000310 <delay+0xa>
}
 800031a:	bf00      	nop
 800031c:	bf00      	nop
 800031e:	370c      	adds	r7, #12
 8000320:	46bd      	mov	sp, r7
 8000322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000326:	4770      	bx	lr

08000328 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000328:	480d      	ldr	r0, [pc, #52]	@ (8000360 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800032a:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 800032c:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000330:	480c      	ldr	r0, [pc, #48]	@ (8000364 <LoopForever+0x6>)
  ldr r1, =_edata
 8000332:	490d      	ldr	r1, [pc, #52]	@ (8000368 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000334:	4a0d      	ldr	r2, [pc, #52]	@ (800036c <LoopForever+0xe>)
  movs r3, #0
 8000336:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000338:	e002      	b.n	8000340 <LoopCopyDataInit>

0800033a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800033a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800033c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800033e:	3304      	adds	r3, #4

08000340 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000340:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000342:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000344:	d3f9      	bcc.n	800033a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000346:	4a0a      	ldr	r2, [pc, #40]	@ (8000370 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000348:	4c0a      	ldr	r4, [pc, #40]	@ (8000374 <LoopForever+0x16>)
  movs r3, #0
 800034a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800034c:	e001      	b.n	8000352 <LoopFillZerobss>

0800034e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800034e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000350:	3204      	adds	r2, #4

08000352 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000352:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000354:	d3fb      	bcc.n	800034e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000356:	f000 f811 	bl	800037c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800035a:	f7ff ff3d 	bl	80001d8 <main>

0800035e <LoopForever>:

LoopForever:
  b LoopForever
 800035e:	e7fe      	b.n	800035e <LoopForever>
  ldr   r0, =_estack
 8000360:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000364:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000368:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 800036c:	080003e4 	.word	0x080003e4
  ldr r2, =_sbss
 8000370:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000374:	2000001c 	.word	0x2000001c

08000378 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000378:	e7fe      	b.n	8000378 <ADC_IRQHandler>
	...

0800037c <__libc_init_array>:
 800037c:	b570      	push	{r4, r5, r6, lr}
 800037e:	4d0d      	ldr	r5, [pc, #52]	@ (80003b4 <__libc_init_array+0x38>)
 8000380:	4c0d      	ldr	r4, [pc, #52]	@ (80003b8 <__libc_init_array+0x3c>)
 8000382:	1b64      	subs	r4, r4, r5
 8000384:	10a4      	asrs	r4, r4, #2
 8000386:	2600      	movs	r6, #0
 8000388:	42a6      	cmp	r6, r4
 800038a:	d109      	bne.n	80003a0 <__libc_init_array+0x24>
 800038c:	4d0b      	ldr	r5, [pc, #44]	@ (80003bc <__libc_init_array+0x40>)
 800038e:	4c0c      	ldr	r4, [pc, #48]	@ (80003c0 <__libc_init_array+0x44>)
 8000390:	f000 f818 	bl	80003c4 <_init>
 8000394:	1b64      	subs	r4, r4, r5
 8000396:	10a4      	asrs	r4, r4, #2
 8000398:	2600      	movs	r6, #0
 800039a:	42a6      	cmp	r6, r4
 800039c:	d105      	bne.n	80003aa <__libc_init_array+0x2e>
 800039e:	bd70      	pop	{r4, r5, r6, pc}
 80003a0:	f855 3b04 	ldr.w	r3, [r5], #4
 80003a4:	4798      	blx	r3
 80003a6:	3601      	adds	r6, #1
 80003a8:	e7ee      	b.n	8000388 <__libc_init_array+0xc>
 80003aa:	f855 3b04 	ldr.w	r3, [r5], #4
 80003ae:	4798      	blx	r3
 80003b0:	3601      	adds	r6, #1
 80003b2:	e7f2      	b.n	800039a <__libc_init_array+0x1e>
 80003b4:	080003dc 	.word	0x080003dc
 80003b8:	080003dc 	.word	0x080003dc
 80003bc:	080003dc 	.word	0x080003dc
 80003c0:	080003e0 	.word	0x080003e0

080003c4 <_init>:
 80003c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80003c6:	bf00      	nop
 80003c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80003ca:	bc08      	pop	{r3}
 80003cc:	469e      	mov	lr, r3
 80003ce:	4770      	bx	lr

080003d0 <_fini>:
 80003d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80003d2:	bf00      	nop
 80003d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80003d6:	bc08      	pop	{r3}
 80003d8:	469e      	mov	lr, r3
 80003da:	4770      	bx	lr
