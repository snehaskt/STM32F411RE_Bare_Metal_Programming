
7_UART_TX_moduler.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000001e0  08000198  08000198  00001198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000378  08000380  00001380  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000378  08000378  00001380  2**0
                  CONTENTS
  4 .ARM          00000000  08000378  08000378  00001380  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000378  08000380  00001380  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000378  08000378  00001378  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800037c  0800037c  0000137c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000000  20000000  20000000  00001380  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000000  08000380  00002000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000001c  08000380  0000201c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00001380  2**0
                  CONTENTS, READONLY
 12 .debug_info   000004b4  00000000  00000000  000013b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000001da  00000000  00000000  00001864  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000080  00000000  00000000  00001a40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000051  00000000  00000000  00001ac0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000dd78  00000000  00000000  00001b11  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00000bc8  00000000  00000000  0000f889  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0004fead  00000000  00000000  00010451  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000602fe  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000000fc  00000000  00000000  00060344  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005c  00000000  00000000  00060440  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	@ (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	@ (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000000 	.word	0x20000000
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08000360 	.word	0x08000360

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	@ (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	@ (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	@ (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000004 	.word	0x20000004
 80001d4:	08000360 	.word	0x08000360

080001d8 <main>:
#include "stm32f4xx.h"
#include "uart.h"


int main(void)
{
 80001d8:	b580      	push	{r7, lr}
 80001da:	af00      	add	r7, sp, #0
	uart2_tx_init();
 80001dc:	f000 f822 	bl	8000224 <uart2_tx_init>

	while(1)
	{
		uart2_write('Y');
 80001e0:	2059      	movs	r0, #89	@ 0x59
 80001e2:	f000 f807 	bl	80001f4 <uart2_write>
        delay(100000);  // Add a delay to slow down transmission
 80001e6:	4802      	ldr	r0, [pc, #8]	@ (80001f0 <main+0x18>)
 80001e8:	f000 f85a 	bl	80002a0 <delay>
		uart2_write('Y');
 80001ec:	bf00      	nop
 80001ee:	e7f7      	b.n	80001e0 <main+0x8>
 80001f0:	000186a0 	.word	0x000186a0

080001f4 <uart2_write>:




void uart2_write(int ch)
{
 80001f4:	b480      	push	{r7}
 80001f6:	b083      	sub	sp, #12
 80001f8:	af00      	add	r7, sp, #0
 80001fa:	6078      	str	r0, [r7, #4]
	/*Make sure that transmitting data register is empty*/

	while(!(USART2->SR & SR_TXE)){}
 80001fc:	bf00      	nop
 80001fe:	4b08      	ldr	r3, [pc, #32]	@ (8000220 <uart2_write+0x2c>)
 8000200:	681b      	ldr	r3, [r3, #0]
 8000202:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000206:	2b00      	cmp	r3, #0
 8000208:	d0f9      	beq.n	80001fe <uart2_write+0xa>

	/*Write to transmit data register*/
	USART2->DR = (ch & 0xFF);
 800020a:	687b      	ldr	r3, [r7, #4]
 800020c:	4a04      	ldr	r2, [pc, #16]	@ (8000220 <uart2_write+0x2c>)
 800020e:	b2db      	uxtb	r3, r3
 8000210:	6053      	str	r3, [r2, #4]
}
 8000212:	bf00      	nop
 8000214:	370c      	adds	r7, #12
 8000216:	46bd      	mov	sp, r7
 8000218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800021c:	4770      	bx	lr
 800021e:	bf00      	nop
 8000220:	40004400 	.word	0x40004400

08000224 <uart2_tx_init>:

void uart2_tx_init(void)
{
 8000224:	b480      	push	{r7}
 8000226:	af00      	add	r7, sp, #0
    // Enable GPIOA clock
    RCC->AHB1ENR |= GPIOAEN;
 8000228:	4b1a      	ldr	r3, [pc, #104]	@ (8000294 <uart2_tx_init+0x70>)
 800022a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800022c:	4a19      	ldr	r2, [pc, #100]	@ (8000294 <uart2_tx_init+0x70>)
 800022e:	f043 0301 	orr.w	r3, r3, #1
 8000232:	6313      	str	r3, [r2, #48]	@ 0x30

    // Configure PA2 as AF7 (UART2 TX)
    GPIOA->MODER &= ~(3U << 4);
 8000234:	4b18      	ldr	r3, [pc, #96]	@ (8000298 <uart2_tx_init+0x74>)
 8000236:	681b      	ldr	r3, [r3, #0]
 8000238:	4a17      	ldr	r2, [pc, #92]	@ (8000298 <uart2_tx_init+0x74>)
 800023a:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 800023e:	6013      	str	r3, [r2, #0]
    GPIOA->MODER |= (2U << 4);
 8000240:	4b15      	ldr	r3, [pc, #84]	@ (8000298 <uart2_tx_init+0x74>)
 8000242:	681b      	ldr	r3, [r3, #0]
 8000244:	4a14      	ldr	r2, [pc, #80]	@ (8000298 <uart2_tx_init+0x74>)
 8000246:	f043 0320 	orr.w	r3, r3, #32
 800024a:	6013      	str	r3, [r2, #0]
    GPIOA->AFR[0] &= ~(0xF << 8);
 800024c:	4b12      	ldr	r3, [pc, #72]	@ (8000298 <uart2_tx_init+0x74>)
 800024e:	6a1b      	ldr	r3, [r3, #32]
 8000250:	4a11      	ldr	r2, [pc, #68]	@ (8000298 <uart2_tx_init+0x74>)
 8000252:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8000256:	6213      	str	r3, [r2, #32]
    GPIOA->AFR[0] |= (7U << 8);
 8000258:	4b0f      	ldr	r3, [pc, #60]	@ (8000298 <uart2_tx_init+0x74>)
 800025a:	6a1b      	ldr	r3, [r3, #32]
 800025c:	4a0e      	ldr	r2, [pc, #56]	@ (8000298 <uart2_tx_init+0x74>)
 800025e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8000262:	6213      	str	r3, [r2, #32]

       // Enable UART2 clock
       RCC->APB1ENR |= UART2EN;
 8000264:	4b0b      	ldr	r3, [pc, #44]	@ (8000294 <uart2_tx_init+0x70>)
 8000266:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000268:	4a0a      	ldr	r2, [pc, #40]	@ (8000294 <uart2_tx_init+0x70>)
 800026a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800026e:	6413      	str	r3, [r2, #64]	@ 0x40

       // Configure baud rate (assuming 16 MHz APB1)
       USART2->BRR = 16000000 / 115200;
 8000270:	4b0a      	ldr	r3, [pc, #40]	@ (800029c <uart2_tx_init+0x78>)
 8000272:	228a      	movs	r2, #138	@ 0x8a
 8000274:	609a      	str	r2, [r3, #8]

       // Enable transmitter and receiver
       USART2->CR1 = (1 << 3) | (1 << 2);
 8000276:	4b09      	ldr	r3, [pc, #36]	@ (800029c <uart2_tx_init+0x78>)
 8000278:	220c      	movs	r2, #12
 800027a:	60da      	str	r2, [r3, #12]

       // Enable UART
       USART2->CR1 |= (1 << 13);
 800027c:	4b07      	ldr	r3, [pc, #28]	@ (800029c <uart2_tx_init+0x78>)
 800027e:	68db      	ldr	r3, [r3, #12]
 8000280:	4a06      	ldr	r2, [pc, #24]	@ (800029c <uart2_tx_init+0x78>)
 8000282:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8000286:	60d3      	str	r3, [r2, #12]

   }
 8000288:	bf00      	nop
 800028a:	46bd      	mov	sp, r7
 800028c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000290:	4770      	bx	lr
 8000292:	bf00      	nop
 8000294:	40023800 	.word	0x40023800
 8000298:	40020000 	.word	0x40020000
 800029c:	40004400 	.word	0x40004400

080002a0 <delay>:
       }
   }


   void delay(volatile int time)
   {
 80002a0:	b480      	push	{r7}
 80002a2:	b083      	sub	sp, #12
 80002a4:	af00      	add	r7, sp, #0
 80002a6:	6078      	str	r0, [r7, #4]
       while(time--);
 80002a8:	bf00      	nop
 80002aa:	687b      	ldr	r3, [r7, #4]
 80002ac:	1e5a      	subs	r2, r3, #1
 80002ae:	607a      	str	r2, [r7, #4]
 80002b0:	2b00      	cmp	r3, #0
 80002b2:	d1fa      	bne.n	80002aa <delay+0xa>
   }
 80002b4:	bf00      	nop
 80002b6:	bf00      	nop
 80002b8:	370c      	adds	r7, #12
 80002ba:	46bd      	mov	sp, r7
 80002bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002c0:	4770      	bx	lr
	...

080002c4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80002c4:	480d      	ldr	r0, [pc, #52]	@ (80002fc <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80002c6:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80002c8:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80002cc:	480c      	ldr	r0, [pc, #48]	@ (8000300 <LoopForever+0x6>)
  ldr r1, =_edata
 80002ce:	490d      	ldr	r1, [pc, #52]	@ (8000304 <LoopForever+0xa>)
  ldr r2, =_sidata
 80002d0:	4a0d      	ldr	r2, [pc, #52]	@ (8000308 <LoopForever+0xe>)
  movs r3, #0
 80002d2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80002d4:	e002      	b.n	80002dc <LoopCopyDataInit>

080002d6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80002d6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80002d8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80002da:	3304      	adds	r3, #4

080002dc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80002dc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80002de:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80002e0:	d3f9      	bcc.n	80002d6 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80002e2:	4a0a      	ldr	r2, [pc, #40]	@ (800030c <LoopForever+0x12>)
  ldr r4, =_ebss
 80002e4:	4c0a      	ldr	r4, [pc, #40]	@ (8000310 <LoopForever+0x16>)
  movs r3, #0
 80002e6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80002e8:	e001      	b.n	80002ee <LoopFillZerobss>

080002ea <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80002ea:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80002ec:	3204      	adds	r2, #4

080002ee <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80002ee:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80002f0:	d3fb      	bcc.n	80002ea <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80002f2:	f000 f811 	bl	8000318 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80002f6:	f7ff ff6f 	bl	80001d8 <main>

080002fa <LoopForever>:

LoopForever:
  b LoopForever
 80002fa:	e7fe      	b.n	80002fa <LoopForever>
  ldr   r0, =_estack
 80002fc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000300:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000304:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000308:	08000380 	.word	0x08000380
  ldr r2, =_sbss
 800030c:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000310:	2000001c 	.word	0x2000001c

08000314 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000314:	e7fe      	b.n	8000314 <ADC_IRQHandler>
	...

08000318 <__libc_init_array>:
 8000318:	b570      	push	{r4, r5, r6, lr}
 800031a:	4d0d      	ldr	r5, [pc, #52]	@ (8000350 <__libc_init_array+0x38>)
 800031c:	4c0d      	ldr	r4, [pc, #52]	@ (8000354 <__libc_init_array+0x3c>)
 800031e:	1b64      	subs	r4, r4, r5
 8000320:	10a4      	asrs	r4, r4, #2
 8000322:	2600      	movs	r6, #0
 8000324:	42a6      	cmp	r6, r4
 8000326:	d109      	bne.n	800033c <__libc_init_array+0x24>
 8000328:	4d0b      	ldr	r5, [pc, #44]	@ (8000358 <__libc_init_array+0x40>)
 800032a:	4c0c      	ldr	r4, [pc, #48]	@ (800035c <__libc_init_array+0x44>)
 800032c:	f000 f818 	bl	8000360 <_init>
 8000330:	1b64      	subs	r4, r4, r5
 8000332:	10a4      	asrs	r4, r4, #2
 8000334:	2600      	movs	r6, #0
 8000336:	42a6      	cmp	r6, r4
 8000338:	d105      	bne.n	8000346 <__libc_init_array+0x2e>
 800033a:	bd70      	pop	{r4, r5, r6, pc}
 800033c:	f855 3b04 	ldr.w	r3, [r5], #4
 8000340:	4798      	blx	r3
 8000342:	3601      	adds	r6, #1
 8000344:	e7ee      	b.n	8000324 <__libc_init_array+0xc>
 8000346:	f855 3b04 	ldr.w	r3, [r5], #4
 800034a:	4798      	blx	r3
 800034c:	3601      	adds	r6, #1
 800034e:	e7f2      	b.n	8000336 <__libc_init_array+0x1e>
 8000350:	08000378 	.word	0x08000378
 8000354:	08000378 	.word	0x08000378
 8000358:	08000378 	.word	0x08000378
 800035c:	0800037c 	.word	0x0800037c

08000360 <_init>:
 8000360:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000362:	bf00      	nop
 8000364:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000366:	bc08      	pop	{r3}
 8000368:	469e      	mov	lr, r3
 800036a:	4770      	bx	lr

0800036c <_fini>:
 800036c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800036e:	bf00      	nop
 8000370:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000372:	bc08      	pop	{r3}
 8000374:	469e      	mov	lr, r3
 8000376:	4770      	bx	lr
